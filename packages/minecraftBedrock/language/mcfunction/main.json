{
	"$schema": "./schema/main.json",
	"$customTypes": {
		"coordinates": [
			{
				"type": "coordinate"
			},
			{
				"type": "coordinate"
			},
			{
				"type": "coordinate"
			}
		]
	},
	"vanilla": [
		{
			"selectorArguments": [
				{
					"description": "Define an x position in the world the selector starts at, for use with the distance argument, the volume arguments, or the limit argument. Using these arguments alone will not restrict the entities found, and will only affect the sorting of targets.",
					"type": "number",
					"argumentName": "x",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"description": "Define a y position in the world the selector starts at, for use with the distance argument, the volume arguments, or the limit argument. Using these arguments alone will not restrict the entities found, and will only affect the sorting of targets",
					"type": "number",
					"argumentName": "y",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"description": "Define a z position in the world the selector starts at, for use with the distance argument, the volume arguments, or the limit argument. Using these arguments alone will not restrict the entities found, and will only affect the sorting of targets",
					"type": "number",
					"argumentName": "z",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"description": "Specifies the minimum range to find entities, respectively. Only unsigned values are allowed.",
					"type": "number",
					"argumentName": "r",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"description": "Specifies the maximum range to find entities, respectively. Only unsigned values are allowed.",
					"type": "number",
					"argumentName": "rm",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"description": "Filter target selection based on their x-difference from some point, as measured by entities' feet position.",
					"type": "number",
					"argumentName": "dx",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"description": "Filter target selection based on their y-difference from some point, as measured by entities' feet position.",
					"type": "number",
					"argumentName": "dy",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"description": "Filter target selection based on their z-difference from some point, as measured by entities' feet position.",
					"type": "number",
					"argumentName": "dz",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"type": "scoreData",
					"argumentName": "scores",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"description": "Filter target selection based on the entity's scoreboard tags. Multiple tag arguments are allowed, and all arguments must be fulfilled for an entity to be selected.",
					"type": "string",
					"argumentName": "tag",
					"additionalData": {
						"multipleInstancesAllowed": "always",
						"supportsNegation": true,
						"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/entityTag.json"
					}
				},
				{
					"description": "Limit the number of targets. For @p, @a, and @e, selects only the specified number of targets by increasing distance from the selector's position. When c is negative, it will reverse the order of targeting (for example, @p[c=-1] will target the furthest player). Inverse sorting does not work with @r.",
					"type": "number",
					"argumentName": "c",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"description": "The minimum level range to search for, respectively.",
					"type": "number",
					"argumentName": "l",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"description": "The maximum level range to search for, respectively.",
					"type": "number",
					"argumentName": "lm",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"description": "Filter target selection by game mode. This naturally filters out all non-player targets.",
					"type": "string",
					"argumentName": "m",
					"additionalData": {
						"multipleInstancesAllowed": "whenNegated",
						"values": [
							"survival",
							"s",
							"0",
							"creative",
							"c",
							"1",
							"adventure",
							"a",
							"2"
						],
						"supportsNegation": true
					}
				},
				{
					"description": "Filter target selection by name. Values are strings, so spaces are allowed only if quotes are applied. This cannot be a JSON text compound.",
					"type": "string",
					"argumentName": "name",
					"additionalData": {
						"supportsNegation": true,
						"multipleInstancesAllowed": "whenNegated"
					}
				},
				{
					"description": "Specifies the minimum x-rotation. Filter target selection based on the entity's rotation along the pitch axis, measured in degrees. Values range from -90 (straight up) to 0 (at the horizon) to +90 (straight down).",
					"type": "number",
					"argumentName": "rx",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"description": "Specifies the maximum x-rotation. Filter target selection based on the entity's rotation along the pitch axis, measured in degrees. Values range from -90 (straight up) to 0 (at the horizon) to +90 (straight down).",
					"type": "number",
					"argumentName": "rxm",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"description": "Specifies the minimum y-rotation values. Filter target selection based on the entity's rotation along the yaw axis, measured clockwise in degrees from due south (or the positive Z direction). Values vary from -180 (facing due north) to -90 (facing due east) to 0 (facing due south) to +90 (facing due west) to +180 (facing due north again).",
					"type": "number",
					"argumentName": "ry",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"description": "Specifies the maximum y-rotation values. Filter target selection based on the entity's rotation along the yaw axis, measured clockwise in degrees from due south (or the positive Z direction). Values vary from -180 (facing due north) to -90 (facing due east) to 0 (facing due south) to +90 (facing due west) to +180 (facing due north again).",
					"type": "number",
					"argumentName": "rym",
					"additionalData": {
						"multipleInstancesAllowed": "never"
					}
				},
				{
					"description": "Filter target selection based on the entity's identifier.",
					"type": "string",
					"argumentName": "type",
					"additionalData": {
						"multipleInstancesAllowed": "whenNegated",
						"supportsNegation": true,
						"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/entity_identifiers"
					}
				},
				{
					"description": "Filter target selection based on the entity's type_family behavior component.",
					"type": "string",
					"argumentName": "family",
					"additionalData": {
						"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/family.json",
						"multipleInstancesAllowed": "always",
						"supportsNegation": true
					}
				}
			],
			"commands": [
				{
					"commandName": "alwaysday",
					"description": "Locks and unlocks the day-night cycle.",
					"arguments": [
						{
							"type": "boolean",
							"argumentName": "lock",
							"description": "Specifies whether the eternal daytime is locked or not.",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "camerashake",
					"description": "Used to enable a camera shaking effect.",
					"arguments": [
						{
							"additionalData": {
								"values": [
									"add"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "player",
							"description": "Specifies the player(s) who's clients will be sent a camera shake request. If not specified, defaults to the command's executor (@s)."
						},
						{
							"type": "number",
							"argumentName": "intensity",
							"description": "Specifies the intensity of the camera shake.",
							"isOptional": true
						},
						{
							"type": "number",
							"argumentName": "seconds",
							"description": "Specifies the duration of the camera shake.",
							"isOptional": true
						},
						{
							"description": "Specifies the type of camera shake direction.",
							"argumentName": "shakeType",
							"additionalData": {
								"values": [
									"positional",
									"rotational"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "camerashake",
					"description": "Used to enable a camera shaking effect.",
					"arguments": [
						{
							"additionalData": {
								"values": [
									"stop"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "player",
							"description": "Specifies the player(s) who's clients will be sent a camera shake request. If not specified, defaults to the command's executor (@s)."
						}
					]
				},
				{
					"commandName": "clear",
					"description": "Clears items from player inventory.",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "player",
							"description": "Specifies the player(s) whose items are cleared. If not specified, defaults to the player who executes the command.",
							"isOptional": true
						},
						{
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"argumentName": "itemName",
							"description": "Specifies the item to be cleared. If not specified, all items are cleared.",
							"isOptional": true
						},
						{
							"type": "number",
							"argumentName": "data",
							"description": "Specifies the data value of the item to be cleared. If not specified, or if -1, all items that match itemName are cleared, regardless of their data.",
							"isOptional": true
						},
						{
							"type": "number",
							"argumentName": "maxCount",
							"description": "Specifies the maximum number of items to be cleared. If not specified, or if -1, all items that match item, or itemName and data are cleared. If 0, instead of clearing of items, detects and queries the amount of specified items.",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "clearspawnpoint",
					"description": "Remove spawnpoints in the world.",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "player",
							"description": "Specifies the player whose spawn point should be removed. If not specified, defaults to the command's executor (@s).",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "clone",
					"description": "Copies blocks from one place to another.",
					"arguments": [
						{
							"type": "$coordinates",
							"argumentName": "begin",
							"description": "Specifies the first coordinate of two opposing corner blocks of the source region."
						},
						{
							"type": "$coordinates",
							"argumentName": "end",
							"description": "Specifies the second coordinate of two opposing corner blocks of the source region."
						},
						{
							"type": "$coordinates",
							"argumentName": "destination",
							"description": "Specifies the lower northwest corner of the destination region."
						},
						{
							"type": "string",
							"description": "Specifies whether to filter the blocks being cloned.",
							"additionalData": {
								"values": [
									"replace",
									"masked"
								]
							},
							"isOptional": true
						},
						{
							"type": "string",
							"description": "Specifies how to treat the source region.",
							"additionalData": {
								"values": [
									"force",
									"move",
									"normal"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "clone",
					"description": "Copies blocks from one place to another.",
					"arguments": [
						{
							"type": "$coordinates",
							"argumentName": "begin",
							"description": "Specifies the first coordinate of two opposing corner blocks of the source region."
						},
						{
							"type": "$coordinates",
							"argumentName": "end",
							"description": "Specifies the second coordinate of two opposing corner blocks of the source region."
						},
						{
							"type": "$coordinates",
							"argumentName": "destination",
							"description": "Specifies the lower northwest corner of the destination region."
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"filtered"
								]
							}
						},
						{
							"type": "string",
							"description": "Specifies how to treat the source region.",
							"additionalData": {
								"values": [
									"force",
									"move",
									"normal"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
							},
							"description": "Specifies the block id to copy in filtered mode."
						},
						{
							"type": "blockState",
							"description": "Specifies the block states to use for the block."
						}
					]
				},
				{
					"commandName": "clone",
					"description": "Copies blocks from one place to another.",
					"arguments": [
						{
							"type": "$coordinates",
							"argumentName": "begin",
							"description": "Specifies the first coordinate of two opposing corner blocks of the source region."
						},
						{
							"type": "$coordinates",
							"argumentName": "end",
							"description": "Specifies the second coordinate of two opposing corner blocks of the source region."
						},
						{
							"type": "$coordinates",
							"argumentName": "destination",
							"description": "Specifies the lower northwest corner of the destination region."
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"filtered"
								]
							}
						},
						{
							"type": "string",
							"description": "Specifies how to treat the source region.",
							"additionalData": {
								"values": [
									"force",
									"move",
									"normal"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
							},
							"description": "Specifies the block id to copy in filtered mode."
						},
						{
							"type": "number",
							"description": "Specifies the block data to match when finding blocks to clone."
						}
					]
				},
				{
					"commandName": "difficulty",
					"description": "Sets the difficulty level.",
					"arguments": [
						{
							"argumentName": "difficulty",
							"description": "Specifies the new difficulty level.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/gameDifficulty.json"
							}
						}
					]
				},
				{
					"commandName": "effect",
					"description": "Add or remove status effects.",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "player",
							"description": "Specifies the target(s)."
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"clear"
								]
							}
						}
					]
				},
				{
					"commandName": "effect",
					"description": "Add or remove status effects.",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "player",
							"description": "Specifies the target(s)."
						},
						{
							"argumentName": "effect",
							"description": "Specifies the effect to be added or removed.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/effectName.json"
							}
						},
						{
							"argumentName": "seconds",
							"description": "Specifies the effect's duration in seconds (or in gameticks for instant_damage, instant_health, and saturation). If not specified, defaults to 30 seconds (or 1 gameticks for instant_damage, instant_health, and saturation).",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "amplifier",
							"description": "Specifies the number of additional levels to add to the effect. If not specified, defaults to 0. Note that the first tier of a status effect (e.g. Regeneration I) is 0, so the second tier, for example Regeneration II, would be specified by an amplifier level of 1.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "hideParticles",
							"description": "Specifies whether the particles and the HUD indicator‌ of the status effect should be hidden. If not specified, defaults to false.",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "enchant",
					"description": "Adds an enchantment to a player's selected item.",
					"arguments": [
						{
							"argumentName": "player",
							"description": "Specifies the target(s).",
							"type": "selector"
						},
						{
							"argumentName": "enchantmentId",
							"description": "Specifies the enchantment to be added to the item held in main hand by the target.",
							"type": "number"
						},
						{
							"argumentName": "level",
							"description": "Specifies the enchantment level. Should be not greater than the maximum level for the specified enchantment. If not specified, defaults to 1.",
							"type": "number",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "enchant",
					"description": "Adds an enchantment to a player's selected item.",
					"arguments": [
						{
							"argumentName": "player",
							"description": "Specifies the target(s).",
							"type": "selector"
						},
						{
							"argumentName": "enchantmentName",
							"description": "Specifies the enchantment to be added to the item held in main hand by the target.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/enchantName.json"
							}
						},
						{
							"argumentName": "level",
							"description": "Specifies the enchantment level. Should be not greater than the maximum level for the specified enchantment. If not specified, defaults to 1.",
							"type": "number",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "event",
					"description": "Used to trigger an event on an entity.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"argumentName": "target",
							"description": "Specifies the target(s) to execute an entity event.",
							"type": "selector"
						},
						{
							"argumentName": "eventName",
							"description": "Specifies the in-game event for the entity.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/entity/dynamic/eventEnum.json"
							}
						}
					]
				},
				{
					"commandName": "fill",
					"description": "Fills a region with a specific block.",
					"arguments": [
						{
							"argumentName": "from",
							"description": "Specifies any two opposing corner blocks of the region to be filled (the 'fill region').",
							"type": "$coordinates"
						},
						{
							"argumentName": "to",
							"description": "Specifies any two opposing corner blocks of the region to be filled (the 'fill region').",
							"type": "$coordinates"
						},
						{
							"argumentName": "tileName",
							"description": "Specifies the block to fill the region with.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
							}
						},
						{
							"argumentName": "tileData",
							"description": "Specifies the block data to match when finding blocks to clone.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "oldBlockHandling",
							"type": "string",
							"additionalData": {
								"values": [
									"destroy",
									"hollow",
									"keep",
									"outline",
									"replace"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "fill",
					"description": "Fills a region with a specific block.",
					"arguments": [
						{
							"argumentName": "from",
							"description": "Specifies any two opposing corner blocks of the region to be filled (the 'fill region').",
							"type": "$coordinates"
						},
						{
							"argumentName": "to",
							"description": "Specifies any two opposing corner blocks of the region to be filled (the 'fill region').",
							"type": "$coordinates"
						},
						{
							"argumentName": "tileName",
							"description": "Specifies the block to fill the region with.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
							}
						},
						{
							"argumentName": "blockStates",
							"description": "Specifies the block states to use for the block.",
							"type": "blockState",
							"isOptional": true
						},
						{
							"argumentName": "oldBlockHandling",
							"type": "string",
							"additionalData": {
								"values": [
									"destroy",
									"hollow",
									"keep",
									"outline",
									"replace"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "fill",
					"description": "Fills a region with a specific block.",
					"arguments": [
						{
							"argumentName": "from",
							"description": "Specifies any two opposing corner blocks of the region to be filled (the 'fill region').",
							"type": "$coordinates"
						},
						{
							"argumentName": "to",
							"description": "Specifies any two opposing corner blocks of the region to be filled (the 'fill region').",
							"type": "$coordinates"
						},
						{
							"argumentName": "tileName",
							"description": "Specifies the block to fill the region with.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
							}
						},
						{
							"argumentName": "tileData",
							"description": "Specifies the block data to match when finding blocks to clone.",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"argumentName": "replaceTileName",
							"description": "Specifies the block to fill the region with.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
							},
							"isOptional": true
						},
						{
							"argumentName": "replaceDataValue",
							"type": "number",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "fill",
					"description": "Fills a region with a specific block.",
					"arguments": [
						{
							"argumentName": "from",
							"description": "Specifies any two opposing corner blocks of the region to be filled (the 'fill region').",
							"type": "$coordinates"
						},
						{
							"argumentName": "to",
							"description": "Specifies any two opposing corner blocks of the region to be filled (the 'fill region').",
							"type": "$coordinates"
						},
						{
							"argumentName": "tileName",
							"description": "Specifies the block to fill the region with.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
							}
						},
						{
							"argumentName": "blockStates",
							"description": "Specifies the block states to use for the block.",
							"type": "blockState"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"argumentName": "replaceTileName",
							"description": "Specifies the block to fill the region with.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
							},
							"isOptional": true
						},
						{
							"argumentName": "replaceDataValue",
							"type": "number",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "fog",
					"description": "Used for managing active fog settings for players.",
					"arguments": [
						{
							"argumentName": "victim",
							"description": "Specifies the entity(s) to be triggered. If not specified, defaults to the command's executor.",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"push"
								]
							}
						},
						{
							"argumentName": "fogID",
							"description": "Should be in a fog definition name.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/fog_identifiers"
							}
						},
						{
							"argumentName": "userProvidedId",
							"description": "Should be in the format of name.",
							"type": "string"
						}
					]
				},
				{
					"commandName": "fog",
					"description": "Used for managing active fog settings for players.",
					"arguments": [
						{
							"argumentName": "victim",
							"description": "Specifies the entity(s) to be triggered. If not specified, defaults to the command's executor.",
							"type": "selector"
						},
						{
							"argumentName": "mode",
							"description": "Specifies whether to remove the fog in pop or remove mode.",
							"type": "string",
							"additionalData": {
								"values": [
									"pop",
									"remove"
								]
							}
						},
						{
							"argumentName": "userProvidedId",
							"description": "Should be in the format of name.",
							"type": "string"
						}
					]
				},
				{
					"commandName": "function",
					"description": "Runs a function.",
					"arguments": [
						{
							"argumentName": "name",
							"description": "Must be of the format path/to/function/file, which refers to a function.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/function/dynamic/commandPathEnum.json"
							}
						}
					]
				},
				{
					"commandName": "gamemode",
					"description": "Sets a player's game mode.",
					"arguments": [
						{
							"argumentName": "gameMode",
							"description": "Specifies the new game mode.",
							"type": "string",
							"additionalData": {
								"values": [
									"survival",
									"s",
									"0",
									"creative",
									"c",
									"1",
									"adventure",
									"a",
									"2"
								]
							}
						},
						{
							"argumentName": "player",
							"description": "Specifies the target(s). If not specified, defaults to the player who executes the command.",
							"type": "selector",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "gamerule",
					"description": "Sets or queries a game rule value.",
					"arguments": [
						{
							"argumentName": "rule",
							"description": "Specifies the game rule to set or query.",
							"type": "string",
							"additionalData": {
								"values": [
									"alwaysday",
									"commandblockoutput",
									"commandblocksenabled",
									"dodaylightcycle",
									"doentitydrops",
									"dofiretick",
									"doimmediaterespawn",
									"domobloot",
									"domobspawning",
									"dolimitedcrafting",
									"dotiledrops",
									"doweathercycle",
									"drowningdamage",
									"falldamage",
									"firedamage",
									"freezedamage",
									"functioncommandlimit",
									"keepinventory",
									"maxcommandchainlength",
									"mobgriefing",
									"naturalregeneration",
									"playersleepingpercentage",
									"pvp",
									"randomtickspeed",
									"respawnblocksexplode",
									"sendcommandfeedback",
									"showbordereffect",
									"showcoordinates",
									"showdaysplayed",
									"showdeathmessages",
									"showtags",
									"tntexplodes"
								]
							}
						},
						{
							"argumentName": "value",
							"description": "Specifies the value to set the game rule to.",
							"type": "number",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "gamerule",
					"description": "Sets or queries a game rule value.",
					"arguments": [
						{
							"argumentName": "rule",
							"description": "Specifies the game rule to set or query.",
							"type": "string",
							"additionalData": {
								"values": [
									"alwaysday",
									"commandblockoutput",
									"commandblocksenabled",
									"dodaylightcycle",
									"doentitydrops",
									"dofiretick",
									"doimmediaterespawn",
									"domobloot",
									"domobspawning",
									"dolimitedcrafting",
									"dotiledrops",
									"doweathercycle",
									"drowningdamage",
									"falldamage",
									"firedamage",
									"freezedamage",
									"functioncommandlimit",
									"keepinventory",
									"maxcommandchainlength",
									"mobgriefing",
									"naturalregeneration",
									"playersleepingpercentage",
									"pvp",
									"randomtickspeed",
									"respawnblocksexplode",
									"sendcommandfeedback",
									"showbordereffect",
									"showcoordinates",
									"showdaysplayed",
									"showdeathmessages",
									"showtags",
									"tntexplodes"
								]
							}
						},
						{
							"argumentName": "value",
							"description": "Specifies the value to set the game rule to.",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "give",
					"description": "Gives an item to a player.",
					"arguments": [
						{
							"argumentName": "player",
							"description": "Specifies the target(s) to give item(s) to.",
							"type": "selector"
						},
						{
							"argumentName": "itemName",
							"description": "Specifies the item to give.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							}
						},
						{
							"argumentName": "amount",
							"description": "Specifies the number of items to give. If not specified, defaults to 1.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "data",
							"description": "Specifies the item data value of the given item(s).",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "components",
							"description": "Specifies the item components of the given item(s).",
							"type": "jsonData",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "kick",
					"description": "Kicks a player off a server.",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "name",
							"description": "Specifies the player(s) to be kicked."
						},
						{
							"type": "string",
							"argumentName": "reason",
							"description": "Message to display to the kicked player.",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "kill",
					"description": "Kills entities (players, mobs, items, etc.).",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "target",
							"description": "Specifies the target(s) to kill. If not specified, defaults to the player who executed the command.",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "mobevent",
					"description": "Enables/disables a specified mob event.",
					"arguments": [
						{
							"argumentName": "event",
							"description": "Specifies the event(s) to control or query.",
							"type": "string",
							"additionalData": {
								"values": [
									"minecraft:pillager_patrols_event",
									"minecraft:wandering_trader_event",
									"events_enabled"
								]
							}
						},
						{
							"argumentName": "value",
							"description": "If specified, true enables the events and false disables them. If omitted, the current enabled status is displayed.",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "msg",
					"description": "Displays a private message to other players.",
					"arguments": [
						{
							"argumentName": "target",
							"description": "Specifies the player(s) to send the message to.",
							"type": "selector"
						},
						{
							"argumentName": "message",
							"description": "Specifies the message to tell.",
							"type": "string",
							"allowMultiple": true
						}
					]
				},
				{
					"commandName": "music",
					"description": "Allows the player to control playing music tracks.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"play",
									"queue"
								]
							}
						},
						{
							"argumentName": "trackName",
							"description": "Specifies a music to play.",
							"type": "string"
						},
						{
							"argumentName": "volume",
							"description": "Specifies the volume of the music.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "fadeSeconds",
							"description": "Specifies the duration music fades in/out.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "repeatMode",
							"description": "Specified whether set the music on repeat or not. If unspecified, defaults to play_once.",
							"type": "string",
							"additionalData": {
								"values": [
									"loop",
									"play_once"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "music",
					"description": "Allows the player to control playing music tracks.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"stop"
								]
							}
						},
						{
							"argumentName": "fadeSeconds",
							"description": "Specifies the duration music fades in/out.",
							"type": "number",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "music",
					"description": "Allows the player to control playing music tracks.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"volume"
								]
							}
						},
						{
							"argumentName": "volume",
							"description": "Specifies the volume of the music.",
							"type": "number"
						}
					]
				},
				{
					"commandName": "particle",
					"description": "Creates particles.",
					"arguments": [
						{
							"argumentName": "effect",
							"description": "Specifies the particle to create.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/particle_identifiers"
							}
						},
						{
							"argumentName": "position",
							"description": "Specifies the position at which to create the particle. If not specified, defaults to the position of the executor.",
							"type": "$coordinates"
						}
					]
				},
				{
					"commandName": "playanimation",
					"description": "Used to run a one-off animation.",
					"arguments": [
						{
							"argumentName": "entity",
							"description": "Specifies the targeted entities.",
							"type": "selector"
						},
						{
							"argumentName": "animation",
							"description": "Should be an animation name.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/clientAnimation.json"
							}
						},
						{
							"argumentName": "nextState",
							"description": "Should be an animation name.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/clientAnimation.json"
							},
							"isOptional": true
						},
						{
							"argumentName": "blendOutTime",
							"description": "Specifies the duration of the gradient animation.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "stopExpression",
							"description": "Specifies the conditions for stopping animation.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/molang/embedded.json"
							},
							"isOptional": true
						},
						{
							"argumentName": "controller",
							"description": "Should be an animation controller name.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/clientAnimationController.json"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "playsound",
					"description": "Plays a sound.",
					"arguments": [
						{
							"argumentName": "sound",
							"description": "Specifies the sound to play.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/soundDefinition.json"
							}
						},
						{
							"argumentName": "player",
							"description": "Specifies the sound's target.",
							"type": "selector",
							"isOptional": true
						},
						{
							"argumentName": "position",
							"description": "Specifies the position to play the sounds from.",
							"type": "$coordinates",
							"isOptional": true
						},
						{
							"argumentName": "volume",
							"description": "Specifies the distance that the sound can be heard. If not specified, defaults to 1. For values less than 1, the volume diminishes and the sound has a smaller sphere in which it may be heard. For values greater than 1, the sound does not actually grow louder, but its audible range (a 16-block radius at 1) is multiplied by volume. There is always a gradual falloff to silence based on distance from the center of the sphere. For values equal to or less than 0, no one can hear the sound.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "pitch",
							"description": "Specifies the pitch of the sound. If not specified, defaults to 1.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "minimumVolume",
							"description": "Specifies the volume for targets outside the sound's normal audible sphere. If a target is outside the normal sphere, the sound is instead centered some short distance from the target (less than four blocks away), and this argument determines its volume.",
							"type": "number",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "reload",
					"description": "Reloads functions and scripts.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"all"
								]
							},
							"description": "Exits the world and reloads all behaviors and resources without closing the game.",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "replaceitem",
					"description": "Replaces items in inventories.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"block"
								]
							}
						},
						{
							"argumentName": "position",
							"description": "Specifies the position of the block to be modified.",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"slot.container"
								]
							}
						},
						{
							"argumentName": "slotId",
							"description": "Specifies the inventory slot to be modified. Valid values depend on whether a block or an entity is being modified.",
							"type": "number"
						},
						{
							"argumentName": "itemName",
							"description": "Specifies the item to be placed in the block or entity's inventory slot.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							}
						},
						{
							"argumentName": "amount",
							"description": "Specifies the number of items to be placed in the block or entity's inventory slot.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "data",
							"description": "Specifies the item data for the item(s) to be placed in the block or entity's inventory slot. Values which are invalid for the specified item id will default to 0. If not specified, defaults to 0.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "components",
							"description": "Specifies the item components.",
							"type": "jsonData",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "replaceitem",
					"description": "Replaces items in inventories.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"argumentName": "target",
							"description": "Specifies one or more entities to modify.",
							"type": "selector"
						},
						{
							"argumentName": "slotType",
							"description": "Specifies the inventory slot to be modified. Valid values depend on whether a block or an entity is being modified.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/slotType.json"
							}
						},
						{
							"argumentName": "slotId",
							"description": "Specifies the inventory slot to be modified. Valid values depend on whether a block or an entity is being modified.",
							"type": "number"
						},
						{
							"argumentName": "itemName",
							"description": "Specifies the item to be placed in the block or entity's inventory slot.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							}
						},
						{
							"argumentName": "amount",
							"description": "Specifies the number of items to be placed in the block or entity's inventory slot.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "data",
							"description": "Specifies the item data for the item(s) to be placed in the block or entity's inventory slot. Values which are invalid for the specified item id will default to 0. If not specified, defaults to 0.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "components",
							"description": "Specifies the item components.",
							"type": "jsonData",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "replaceitem",
					"description": "Replaces items in inventories.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"block"
								]
							}
						},
						{
							"argumentName": "position",
							"description": "Specifies the position of the block to be modified.",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"slot.container"
								]
							}
						},
						{
							"argumentName": "slotId",
							"description": "Specifies the inventory slot to be modified. Valid values depend on whether a block or an entity is being modified.",
							"type": "number"
						},
						{
							"argumentName": "oldItemHandling",
							"type": "string",
							"additionalData": {
								"values": [
									"destroy",
									"keep"
								]
							}
						},
						{
							"argumentName": "itemName",
							"description": "Specifies the item to be placed in the block or entity's inventory slot.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							}
						},
						{
							"argumentName": "amount",
							"description": "Specifies the number of items to be placed in the block or entity's inventory slot.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "data",
							"description": "Specifies the item data for the item(s) to be placed in the block or entity's inventory slot. Values which are invalid for the specified item id will default to 0. If not specified, defaults to 0.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "components",
							"description": "Specifies the item components.",
							"type": "jsonData",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "replaceitem",
					"description": "Replaces items in inventories.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"argumentName": "target",
							"description": "Specifies one or more entities to modify.",
							"type": "selector"
						},
						{
							"argumentName": "slotType",
							"description": "Specifies the inventory slot to be modified. Valid values depend on whether a block or an entity is being modified.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/slotType.json"
							}
						},
						{
							"argumentName": "slotId",
							"description": "Specifies the inventory slot to be modified. Valid values depend on whether a block or an entity is being modified.",
							"type": "number"
						},
						{
							"argumentName": "oldItemHandling",
							"type": "string",
							"additionalData": {
								"values": [
									"destroy",
									"keep"
								]
							}
						},
						{
							"argumentName": "itemName",
							"description": "Specifies the item to be placed in the block or entity's inventory slot.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							}
						},
						{
							"argumentName": "amount",
							"description": "Specifies the number of items to be placed in the block or entity's inventory slot.",
							"type": "number"
						},
						{
							"argumentName": "data",
							"description": "Specifies the item data for the item(s) to be placed in the block or entity's inventory slot. Values which are invalid for the specified item id will default to 0. If not specified, defaults to 0.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "components",
							"description": "Specifies the item components.",
							"type": "jsonData",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "ride",
					"description": "Used to make entities ride other entities, stop entities from riding, make rides evict their riders, or summon rides or riders.",
					"arguments": [
						{
							"argumentName": "riders",
							"description": "Specifies the riders.",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"start_riding"
								]
							}
						},
						{
							"argumentName": "ride",
							"description": "Specifies an entity to be ridden on.",
							"type": "selector"
						},
						{
							"argumentName": "teleportRules",
							"description": "Specified which entities are teleported. If unspecified, defaults to teleport_rider",
							"type": "string",
							"additionalData": {
								"values": [
									"teleport_ride",
									"teleport_rider"
								]
							},
							"isOptional": true
						},
						{
							"argumentName": "howToFill",
							"type": "string",
							"additionalData": {
								"values": [
									"if_group_fits",
									"until_full"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "ride",
					"description": "Used to make entities ride other entities, stop entities from riding, make rides evict their riders, or summon rides or riders.",
					"arguments": [
						{
							"argumentName": "riders",
							"description": "Specifies the riders.",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"stop_riding"
								]
							}
						}
					]
				},
				{
					"commandName": "ride",
					"description": "Used to make entities ride other entities, stop entities from riding, make rides evict their riders, or summon rides or riders.",
					"arguments": [
						{
							"argumentName": "riders",
							"description": "Specifies the riders.",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"evict_riders"
								]
							}
						}
					]
				},
				{
					"commandName": "ride",
					"description": "Used to make entities ride other entities, stop entities from riding, make rides evict their riders, or summon rides or riders.",
					"arguments": [
						{
							"argumentName": "riders",
							"description": "Specifies the riders.",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"summon_rider"
								]
							}
						},
						{
							"argumentName": "entityType",
							"description": "Specifies the entities to be summoned.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/entity_identifiers"
							}
						},
						{
							"argumentName": "spawnEvent",
							"description": "Specifies the in-game event for the to-be-summoned entities.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/entity/dynamic/eventReferenceEnum.json"
							},
							"isOptional": true
						},
						{
							"argumentName": "nameTag",
							"description": "Specifies the name of the to-be-summoned entities.",
							"type": "string",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "ride",
					"description": "Used to make entities ride other entities, stop entities from riding, make rides evict their riders, or summon rides or riders.",
					"arguments": [
						{
							"argumentName": "riders",
							"description": "Specifies the riders.",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"summon_ride"
								]
							}
						},
						{
							"argumentName": "entityType",
							"description": "Specifies the entities to be summoned.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/entity_identifiers"
							}
						},
						{
							"argumentName": "rideRules",
							"type": "string",
							"additionalData": {
								"values": [
									"no_ride_change",
									"reassign_rides",
									"skip_riders"
								]
							},
							"isOptional": true
						},
						{
							"argumentName": "spawnEvent",
							"description": "Specifies the in-game event for the to-be-summoned entities.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/entity/dynamic/eventReferenceEnum.json"
							},
							"isOptional": true
						},
						{
							"argumentName": "nameTag",
							"description": "Specifies the name of the to-be-summoned entities.",
							"type": "string",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "say",
					"description": "Displays a message to multiple players.",
					"arguments": [
						{
							"type": "string",
							"argumentName": "message",
							"description": "Specifies the message to say.",
							"allowMultiple": true
						}
					]
				},
				{
					"commandName": "schedule",
					"description": "Delays the execution of a function.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"on_area_loaded"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"add"
								]
							}
						},
						{
							"argumentName": "from",
							"description": "Specify the coordinates of opposite corners of a rectangular area used to define a loaded area.",
							"type": "$coordinates"
						},
						{
							"argumentName": "to",
							"description": "Specify the coordinates of opposite corners of a rectangular area used to define a loaded area.",
							"type": "$coordinates"
						},
						{
							"argumentName": "function",
							"description": "Specify the function to be cleared.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/function/dynamic/commandPathEnum.json"
							}
						}
					]
				},
				{
					"commandName": "schedule",
					"description": "Delays the execution of a function.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"on_area_loaded"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"add"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"circle"
								]
							}
						},
						{
							"argumentName": "center",
							"description": "Specifies the coordinates of the center point of a circular area used to define a loaded area.",
							"type": "$coordinates"
						},
						{
							"argumentName": "radius",
							"description": "Specifies the radius of a circular loaded area as the number of chunks from the center to the edge of the circle.",
							"type": "number"
						},
						{
							"argumentName": "function",
							"description": "Specify the function to be cleared.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/function/dynamic/commandPathEnum.json"
							}
						}
					]
				},
				{
					"commandName": "schedule",
					"description": "Delays the execution of a function.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"on_area_loaded"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"add"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"tickingarea"
								]
							}
						},
						{
							"argumentName": "name",
							"description": "Specifies the name of a ticking area, executes function when which is added.",
							"type": "string"
						},
						{
							"argumentName": "function",
							"description": "Specify the function to be cleared.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/function/dynamic/commandPathEnum.json"
							}
						}
					]
				},
				{
					"commandName": "scoreboard",
					"description": "Manages scoreboard objectives and players.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"objectives"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"add"
								]
							}
						},
						{
							"argumentName": "objective",
							"type": "string"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"dummy"
								]
							}
						},
						{
							"argumentName": "displayName",
							"type": "string",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "scoreboard",
					"description": "Manages scoreboard objectives and players.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"objectives"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"list"
								]
							}
						}
					]
				},
				{
					"commandName": "scoreboard",
					"description": "Manages scoreboard objectives and players.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"objectives"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"remove"
								]
							}
						},
						{
							"argumentName": "objective",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
							}
						}
					]
				},
				{
					"commandName": "scoreboard",
					"description": "Manages scoreboard objectives and players.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"objectives"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"setdisplay"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"belowname"
								]
							}
						},
						{
							"argumentName": "objective",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "scoreboard",
					"description": "Manages scoreboard objectives and players.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"objectives"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"setdisplay"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"list",
									"sidebar"
								]
							}
						},
						{
							"argumentName": "objective",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
							},
							"isOptional": true
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"ascending",
									"descending"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "scoreboard",
					"description": "Manages scoreboard objectives and players.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"players"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"list"
								]
							}
						},
						{
							"argumentName": "playername",
							"type": "selector",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "scoreboard",
					"description": "Manages scoreboard objectives and players.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"players"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"reset"
								]
							}
						},
						{
							"argumentName": "player",
							"type": "selector"
						},
						{
							"argumentName": "objective",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "scoreboard",
					"description": "Manages scoreboard objectives and players.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"players"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"test"
								]
							}
						},
						{
							"argumentName": "player",
							"type": "selector"
						},
						{
							"argumentName": "objective",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
							}
						},
						{
							"argumentName": "min",
							"type": "number"
						},
						{
							"argumentName": "max",
							"type": "number",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "scoreboard",
					"description": "Manages scoreboard objectives and players.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"players"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"random"
								]
							}
						},
						{
							"argumentName": "player",
							"type": "selector"
						},
						{
							"argumentName": "objective",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
							}
						},
						{
							"argumentName": "min",
							"type": "number"
						},
						{
							"argumentName": "max",
							"type": "number"
						}
					]
				},
				{
					"commandName": "scoreboard",
					"description": "Manages scoreboard objectives and players.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"players"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set",
									"add",
									"remove"
								]
							}
						},
						{
							"argumentName": "player",
							"type": "selector"
						},
						{
							"argumentName": "objective",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
							}
						},
						{
							"argumentName": "count",
							"type": "number"
						}
					]
				},
				{
					"commandName": "scoreboard",
					"description": "Manages scoreboard objectives and players.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"players"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"operation"
								]
							}
						},
						{
							"argumentName": "targetName",
							"type": "selector"
						},
						{
							"argumentName": "targetObjective",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
							}
						},
						{
							"argumentName": "operation",
							"type": "string",
							"additionalData": {
								"values": [
									"+=",
									"-=",
									"*=",
									"/=",
									"%=",
									"=",
									"<",
									">",
									"><"
								]
							}
						},
						{
							"argumentName": "selector",
							"type": "selector"
						},
						{
							"argumentName": "objective",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
							}
						}
					]
				},
				{
					"commandName": "setblock",
					"description": "Changes a block to another block.",
					"arguments": [
						{
							"argumentName": "position",
							"description": "Specifies the position of the block to be changed.",
							"type": "$coordinates"
						},
						{
							"argumentName": "tileName",
							"description": "Specifies the new block.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
							}
						},
						{
							"argumentName": "tileData",
							"description": "Specifies the block data to use for the new block. Values that are invalid for the specified block id revert to 0. If not specified, defaults to 0.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "mode",
							"description": "Specifies how to handle the block change.",
							"type": "string",
							"additionalData": {
								"values": [
									"destroy",
									"keep",
									"replace"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "setblock",
					"description": "Changes a block to another block.",
					"arguments": [
						{
							"argumentName": "position",
							"description": "Specifies the position of the block to be changed.",
							"type": "$coordinates"
						},
						{
							"argumentName": "tileName",
							"description": "Specifies the new block.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
							}
						},
						{
							"argumentName": "blockStates",
							"description": "Specifies the block states to use for the block.",
							"type": "blockState",
							"isOptional": true
						},
						{
							"argumentName": "mode",
							"description": "Specifies how to handle the block change.",
							"type": "string",
							"additionalData": {
								"values": [
									"destroy",
									"keep",
									"replace"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "setworldspawn",
					"description": "Sets the world spawn.",
					"arguments": [
						{
							"argumentName": "spawnPoint",
							"description": "Specifies the coordinates of the world spawn. If not specified, defaults to the block position of the command's execution.",
							"type": "$coordinates",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "spawnpoint",
					"description": "Sets the spawn point for a player.",
					"arguments": [
						{
							"argumentName": "player",
							"description": "Specifies the player whose spawn point should be set. If not specified, defaults to the command's executor.",
							"type": "selector",
							"isOptional": true
						},
						{
							"argumentName": "spawnPos",
							"description": "Specifies the coordinates of the player's new spawn point. If not specified, defaults to the position of the specified player(s).",
							"type": "$coordinates",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "spreadplayers",
					"description": "Teleports entities to random locations.",
					"arguments": [
						{
							"argumentName": "x",
							"description": "Specifies the center of the region to spread targets to.",
							"type": "number"
						},
						{
							"argumentName": "z",
							"description": "Specifies the center of the region to spread targets to.",
							"type": "number"
						},
						{
							"argumentName": "spreadDistance",
							"description": "Specifies the minimum distance between targets.",
							"type": "number"
						},
						{
							"argumentName": "maxRange",
							"description": "Specifies the maximum distance on each horizontal axis from the center of the area to spread targets (thus, the area is square, not circular).",
							"type": "number"
						},
						{
							"argumentName": "victim",
							"description": "Specifies the targets to spread.",
							"type": "selector"
						},
						{
							"argumentName": "maxHeight",
							"description": "Specifies the maximum height for resulting positions.",
							"type": "number"
						}
					]
				},
				{
					"commandName": "stopsound",
					"arguments": [
						{
							"argumentName": "player",
							"description": "Specifies the command's target.",
							"type": "selector"
						},
						{
							"argumentName": "sound",
							"description": "Specifies the sound to stop.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/soundDefinition.json"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "structure",
					"description": "Used to save and load structures without having to use structure blocks items in inventories.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"save"
								]
							}
						},
						{
							"argumentName": "name",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/structure/dynamic/structureIdentifierEnum.json"
							}
						},
						{
							"argumentName": "from",
							"description": "Specifies any two opposing corner blocks of the region to be saved.",
							"type": "$coordinates"
						},
						{
							"argumentName": "to",
							"description": "Specifies any two opposing corner blocks of the region to be saved.",
							"type": "$coordinates"
						},
						{
							"argumentName": "saveMode",
							"description": "Specifies the storage location.",
							"type": "string",
							"additionalData": {
								"values": [
									"disk",
									"memory"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "structure",
					"description": "Used to save and load structures without having to use structure blocks items in inventories.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"save"
								]
							}
						},
						{
							"argumentName": "name",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/structure/dynamic/structureIdentifierEnum.json"
							}
						},
						{
							"argumentName": "from",
							"description": "Specifies any two opposing corner blocks of the region to be saved.",
							"type": "$coordinates"
						},
						{
							"argumentName": "to",
							"description": "Specifies any two opposing corner blocks of the region to be saved.",
							"type": "$coordinates"
						},
						{
							"argumentName": "includeEntities",
							"description": "Specifies whether including entities or not. If unspecified, defaults to true.",
							"type": "boolean",
							"isOptional": true
						},
						{
							"argumentName": "saveMode",
							"description": "Specifies the storage location.",
							"type": "string",
							"additionalData": {
								"values": [
									"disk",
									"memory"
								]
							},
							"isOptional": true
						},
						{
							"argumentName": "includeBlocks",
							"description": "Specifies whether including blocks or not. If unspecified, defaults to true.",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "structure",
					"description": "Used to save and load structures without having to use structure blocks items in inventories.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"load"
								]
							}
						},
						{
							"argumentName": "name",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/structure/dynamic/structureIdentifierEnum.json"
							}
						},
						{
							"argumentName": "to",
							"description": "Specifies the lower northwest corner of the destination region.",
							"type": "$coordinates"
						},
						{
							"argumentName": "rotation",
							"description": "Specifies the rotation when loading a structure. If unspecified, defaults to 0_degrees.",
							"type": "string",
							"additionalData": {
								"values": [
									"0_degrees",
									"90_degrees",
									"180_degrees",
									"270_degrees"
								]
							},
							"isOptional": true
						},
						{
							"argumentName": "mirror",
							"description": "Specifies the axis of mirror flip when loading a structure. If unspecified, defaults to none.",
							"type": "string",
							"additionalData": {
								"values": [
									"x",
									"z",
									"xz",
									"none"
								]
							},
							"isOptional": true
						},
						{
							"argumentName": "includeEntities",
							"description": "Specifies whether including entities or not. If unspecified, defaults to true.",
							"type": "boolean",
							"isOptional": true
						},
						{
							"argumentName": "includeBlocks",
							"description": "Specifies whether including blocks or not. If unspecified, defaults to true.",
							"type": "boolean",
							"isOptional": true
						},
						{
							"argumentName": "integrity",
							"description": "Specifies the integrity (probability of each block being loaded). If 100, all blocks in the structure are loaded. If 0, no blocks are loaded. If unspecified, defaults to 100.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "seed",
							"description": "Specifies the seed when calculating whether a block should be loaded according to integrity. If unspecified, a random seed is taken.",
							"type": "string",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "structure",
					"description": "Used to save and load structures without having to use structure blocks items in inventories.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"load"
								]
							}
						},
						{
							"argumentName": "name",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/structure/dynamic/structureIdentifierEnum.json"
							}
						},
						{
							"argumentName": "to",
							"description": "Specifies the lower northwest corner of the destination region.",
							"type": "$coordinates"
						},
						{
							"argumentName": "rotation",
							"description": "Specifies the rotation when loading a structure. If unspecified, defaults to 0_degrees.",
							"type": "string",
							"additionalData": {
								"values": [
									"0_degrees",
									"90_degrees",
									"180_degrees",
									"270_degrees"
								]
							},
							"isOptional": true
						},
						{
							"argumentName": "mirror",
							"description": "Specifies the axis of mirror flip when loading a structure. If unspecified, defaults to none.",
							"type": "string",
							"additionalData": {
								"values": [
									"x",
									"z",
									"xz",
									"none"
								]
							},
							"isOptional": true
						},
						{
							"argumentName": "animationMode",
							"description": "Specifies the animation to generate structures.",
							"type": "string",
							"additionalData": {
								"values": [
									"block_by_block",
									"layer_by_layer"
								]
							},
							"isOptional": true
						},
						{
							"argumentName": "animationSeconds",
							"description": "Specifies the duration of the animation.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "includeEntities",
							"description": "Specifies whether including entities or not. If unspecified, defaults to true.",
							"type": "boolean",
							"isOptional": true
						},
						{
							"argumentName": "includeBlocks",
							"description": "Specifies whether including blocks or not. If unspecified, defaults to true.",
							"type": "boolean",
							"isOptional": true
						},
						{
							"argumentName": "integrity",
							"description": "Specifies the integrity (probability of each block being loaded). If 100, all blocks in the structure are loaded. If 0, no blocks are loaded. If unspecified, defaults to 100.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "seed",
							"description": "Specifies the seed when calculating whether a block should be loaded according to integrity. If unspecified, a random seed is taken.",
							"type": "string",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "structure",
					"description": "Used to save and load structures without having to use structure blocks items in inventories.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"delete"
								]
							}
						},
						{
							"argumentName": "name",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/structure/dynamic/structureIdentifierEnum.json"
							}
						}
					]
				},
				{
					"commandName": "summon",
					"description": "Summons an entity.",
					"arguments": [
						{
							"argumentName": "entityType",
							"description": "Specifies the entity to be summoned.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/entity_identifiers"
							}
						},
						{
							"argumentName": "nameTag",
							"description": "Specifies the name of the entity.",
							"type": "string"
						},
						{
							"argumentName": "spawnPos",
							"description": "Specifies the position to summon the entity. If not specified, defaults to the position of the command's execution.",
							"type": "$coordinates",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tag",
					"description": "Controls entity tags.",
					"arguments": [
						{
							"argumentName": "entity",
							"description": "Specifies the command's target.",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"add"
								]
							}
						},
						{
							"argumentName": "name",
							"description": "Specifies the name of the tag to be added into or removed from the targets.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/entityTag.json"
							}
						}
					]
				},
				{
					"commandName": "tag",
					"description": "Controls entity tags.",
					"arguments": [
						{
							"argumentName": "entity",
							"description": "Specifies the command's target.",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"remove"
								]
							}
						},
						{
							"argumentName": "name",
							"description": "Specifies the name of the tag to be added into or removed from the targets.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/entityTag.json"
							}
						}
					]
				},
				{
					"commandName": "tag",
					"description": "Controls entity tags.",
					"arguments": [
						{
							"argumentName": "entity",
							"description": "Specifies the command's target.",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"list"
								]
							}
						}
					]
				},
				{
					"commandName": "teleport",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "teleport",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"argumentName": "yRot",
							"description": "Specifies the rotation.",
							"type": "number"
						},
						{
							"argumentName": "xRot",
							"description": "Specifies the rotation.",
							"type": "number"
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "teleport",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtPosition",
							"description": "Specifies the coordinates to make the target(s) facing to.",
							"type": "$coordinates"
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "teleport",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtEntity",
							"description": "Specifies the entity to make the target(s) facing to.",
							"type": "selector"
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "teleport",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "victim",
							"description": "Specifies the entity(s) to be teleported. If not specified, defaults to the command's executor.",
							"type": "selector"
						},
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"argumentName": "yRot",
							"description": "Specifies the rotation.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "xRot",
							"description": "Specifies the rotation.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "teleport",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "victim",
							"description": "Specifies the entity(s) to be teleported. If not specified, defaults to the command's executor.",
							"type": "selector"
						},
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtPosition",
							"description": "Specifies the coordinates to make the target(s) facing to.",
							"type": "$coordinates"
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "teleport",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "victim",
							"description": "Specifies the entity(s) to be teleported. If not specified, defaults to the command's executor.",
							"type": "selector"
						},
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtEntity",
							"description": "Specifies the entity to make the target(s) facing to.",
							"type": "selector"
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "teleport",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "destination",
							"description": "Specifies the entity to teleport the target(s) to.",
							"type": "selector"
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "teleport",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "victim",
							"description": "Specifies the entity(s) to be teleported. If not specified, defaults to the command's executor.",
							"type": "selector"
						},
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tell",
					"description": "Displays a private message to other players.",
					"arguments": [
						{
							"argumentName": "target",
							"description": "Specifies the player(s) to send the message to.",
							"type": "selector"
						},
						{
							"argumentName": "message",
							"description": "Specifies the message to tell.",
							"type": "string",
							"allowMultiple": true
						}
					]
				},
				{
					"commandName": "tellraw",
					"description": "Displays a JSON message to players.",
					"arguments": [
						{
							"argumentName": "target",
							"description": "Specifies the player(s) to send the message to.",
							"type": "selector"
						},
						{
							"argumentName": "rawJsonMessage",
							"description": "Specifies the message to send.",
							"type": "jsonData"
						}
					]
				},
				{
					"commandName": "testfor",
					"description": "Counts entities matching specified conditions.",
					"arguments": [
						{
							"argumentName": "victim",
							"description": "Specifies the entities to test.",
							"type": "selector"
						}
					]
				},
				{
					"commandName": "testforblock",
					"description": "Tests whether a block is in a location.",
					"arguments": [
						{
							"argumentName": "position",
							"description": "Specifies the coordinates of the block to test.",
							"type": "$coordinates"
						},
						{
							"argumentName": "tileName",
							"description": "Specifies the block to test for.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
							}
						},
						{
							"argumentName": "dataValue",
							"description": "Specifies the block data to match when testfor. Values (bitwise AND 0xFFFF) that are invalid for the specified block id revert to 0. If it is negative, all blocks that match tileName are tested.",
							"type": "number",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "testforblocks",
					"description": "Tests whether the blocks in two regions match.",
					"arguments": [
						{
							"argumentName": "begin",
							"description": "Specifies two opposing corners of the region to use as the pattern to test for (the 'source region').",
							"type": "$coordinates"
						},
						{
							"argumentName": "end",
							"description": "Specifies two opposing corners of the region to use as the pattern to test for (the 'source region').",
							"type": "$coordinates"
						},
						{
							"argumentName": "destination",
							"description": "Specifies the lower northwestern corner (the corner with the most-negative values) of the region to be checked (the 'destination region'). Source and destination regions may overlap.",
							"type": "$coordinates"
						},
						{
							"argumentName": "mode",
							"description": "Specifies how to match blocks.",
							"type": "string",
							"additionalData": {
								"values": [
									"all",
									"masked"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tickingarea",
					"description": "Add, remove, or list ticking areas.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"add"
								]
							}
						},
						{
							"argumentName": "from",
							"description": "Specifies the coordinates of opposite corners of a rectangular area used to define a loaded area.",
							"type": "$coordinates"
						},
						{
							"argumentName": "to",
							"description": "Specifies the coordinates of opposite corners of a rectangular area used to define a loaded area.",
							"type": "$coordinates"
						},
						{
							"argumentName": "name",
							"description": "Specifies an optional name for a ticking area.",
							"type": "string",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tickingarea",
					"description": "Add, remove, or list ticking areas.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"add"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"circle"
								]
							}
						},
						{
							"argumentName": "center",
							"description": "Specifies the coordinates of the center point of a circular area used to define a ticking area.",
							"type": "$coordinates"
						},
						{
							"argumentName": "radius",
							"description": "Specifies the radius of a circular ticking area as the number of chunks from the center to the edge of the circle.",
							"type": "number"
						},
						{
							"argumentName": "name",
							"description": "Specifies an optional name for a ticking area.",
							"type": "string",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tickingarea",
					"description": "Add, remove, or list ticking areas.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"remove"
								]
							}
						},
						{
							"argumentName": "name",
							"description": "Specifies an optional name for a ticking area.",
							"type": "string"
						}
					]
				},
				{
					"commandName": "tickingarea",
					"description": "Add, remove, or list ticking areas.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"remove"
								]
							}
						},
						{
							"argumentName": "position",
							"description": "Specifies the coordinates of a point within the ticking area(s) being removed.",
							"type": "$coordinates"
						}
					]
				},
				{
					"commandName": "tickingarea",
					"description": "Add, remove, or list ticking areas.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"remove_all"
								]
							}
						}
					]
				},
				{
					"commandName": "tickingarea",
					"description": "Add, remove, or list ticking areas.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"list"
								]
							}
						},
						{
							"argumentName": "dimensions",
							"description": "Specifies whether the ticking area in other dimensions should be listed.",
							"type": "string",
							"additionalData": {
								"values": [
									"all-dimensions"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "time",
					"description": "Changes or queries the world's game time.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"add"
								]
							}
						},
						{
							"argumentName": "amount",
							"description": "Specifies the time to add or set.",
							"type": "number"
						}
					]
				},
				{
					"commandName": "time",
					"description": "Changes or queries the world's game time.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"query"
								]
							}
						},
						{
							"argumentName": "time",
							"description": "Specifies the time to query.",
							"type": "string",
							"additionalData": {
								"values": [
									"daytime",
									"gametime",
									"day"
								]
							}
						}
					]
				},
				{
					"commandName": "time",
					"description": "Changes or queries the world's game time.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "amount",
							"description": "Specifies the time to add or set.",
							"type": "number"
						}
					]
				},
				{
					"commandName": "time",
					"description": "Changes or queries the world's game time.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "time",
							"description": "Specifies the time to set (day = 1,000, night = 13,000, noon = 6,000, midnight = 18,000, sunrise = 23,000‌, sunset = 12,000).",
							"type": "string",
							"additionalData": {
								"values": [
									"day",
									"night",
									"noon",
									"midnight",
									"sunrise",
									"sunset"
								]
							}
						}
					]
				},
				{
					"commandName": "title",
					"description": "Manages screen titles.",
					"arguments": [
						{
							"argumentName": "player",
							"description": "Specifies the player(s) to display a screen title to.",
							"type": "selector"
						},
						{
							"argumentName": "option",
							"type": "string",
							"additionalData": {
								"values": [
									"clear",
									"reset"
								]
							}
						}
					]
				},
				{
					"commandName": "title",
					"description": "Manages screen titles.",
					"arguments": [
						{
							"argumentName": "player",
							"description": "Specifies the player(s) to display a screen title to.",
							"type": "selector"
						},
						{
							"argumentName": "titleLocation",
							"type": "string",
							"additionalData": {
								"values": [
									"title",
									"subtitle",
									"actionbar"
								]
							}
						},
						{
							"argumentName": "titleText",
							"description": "Specifies the text to display as a title, subtitle, or on the action bar.",
							"type": "string",
							"allowMultiple": true
						}
					]
				},
				{
					"commandName": "title",
					"description": "Manages screen titles.",
					"arguments": [
						{
							"argumentName": "player",
							"description": "Specifies the player(s) to display a screen title to.",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"times"
								]
							}
						},
						{
							"argumentName": "fadeIn",
							"description": "Specifies the time in game ticks (1/20ths of a second) for the screen title to fade in, stay, and fade out.",
							"type": "number"
						},
						{
							"argumentName": "stay",
							"description": "Specifies the time in game ticks (1/20ths of a second) for the screen title to fade in, stay, and fade out.",
							"type": "number"
						},
						{
							"argumentName": "fadeOut",
							"description": "Specifies the time in game ticks (1/20ths of a second) for the screen title to fade in, stay, and fade out.",
							"type": "number"
						}
					]
				},
				{
					"commandName": "titleraw",
					"description": "Controls screen titles with JSON messages.",
					"arguments": [
						{
							"argumentName": "player",
							"description": "Specifies the player(s) to display a screen title to.",
							"type": "selector"
						},
						{
							"argumentName": "option",
							"type": "string",
							"additionalData": {
								"values": [
									"clear",
									"reset"
								]
							}
						}
					]
				},
				{
					"commandName": "titleraw",
					"description": "Controls screen titles with JSON messages.",
					"arguments": [
						{
							"argumentName": "player",
							"description": "Specifies the player(s) to display a screen title to.",
							"type": "selector"
						},
						{
							"argumentName": "titleLocation",
							"type": "string",
							"additionalData": {
								"values": [
									"title",
									"subtitle",
									"actionbar"
								]
							}
						},
						{
							"argumentName": "rawJsontitleText",
							"description": "Specifies the text to display as a title, subtitle, or on the action bar.",
							"type": "jsonData"
						}
					]
				},
				{
					"commandName": "titleraw",
					"description": "Controls screen titles with JSON messages.",
					"arguments": [
						{
							"argumentName": "player",
							"description": "Specifies the player(s) to display a screen title to.",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"times"
								]
							}
						},
						{
							"argumentName": "fadeIn",
							"description": "Specifies the time in game ticks (1/20ths of a second) for the screen title to fade in, stay, and fade out.",
							"type": "number"
						},
						{
							"argumentName": "stay",
							"description": "Specifies the time in game ticks (1/20ths of a second) for the screen title to fade in, stay, and fade out.",
							"type": "number"
						},
						{
							"argumentName": "fadeOut",
							"description": "Specifies the time in game ticks (1/20ths of a second) for the screen title to fade in, stay, and fade out.",
							"type": "number"
						}
					]
				},
				{
					"commandName": "toggledownfall",
					"description": "Toggles the weather."
				},
				{
					"commandName": "tp",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tp",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"argumentName": "yRot",
							"description": "Specifies the rotation.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "xRot",
							"description": "Specifies the rotation.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tp",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtPosition",
							"description": "Specifies the coordinates to make the target(s) facing to.",
							"type": "$coordinates"
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tp",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtEntity",
							"description": "Specifies the entity to make the target(s) facing to.",
							"type": "selector"
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tp",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "victim",
							"description": "Specifies the entity(s) to be teleported. If not specified, defaults to the command's executor.",
							"type": "selector"
						},
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"argumentName": "yRot",
							"description": "Specifies the rotation.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "xRot",
							"description": "Specifies the rotation.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tp",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "victim",
							"description": "Specifies the entity(s) to be teleported. If not specified, defaults to the command's executor.",
							"type": "selector"
						},
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtPosition",
							"description": "Specifies the coordinates to make the target(s) facing to.",
							"type": "$coordinates"
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tp",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "victim",
							"description": "Specifies the entity(s) to be teleported. If not specified, defaults to the command's executor.",
							"type": "selector"
						},
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtEntity",
							"description": "Specifies the entity to make the target(s) facing to.",
							"type": "selector"
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tp",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "destination",
							"description": "Specifies the entity to teleport the target(s) to.",
							"type": "selector"
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tp",
					"description": "Teleports entities.",
					"arguments": [
						{
							"argumentName": "victim",
							"description": "Specifies the entity(s) to be teleported. If not specified, defaults to the command's executor.",
							"type": "selector"
						},
						{
							"argumentName": "destination",
							"description": "Specifies the coordinates to teleport the target(s) to.",
							"type": "$coordinates"
						},
						{
							"argumentName": "checkForBlocks",
							"description": "If set to true, teleports the target(s) only if the target(s) would not collide with a block it cannot be inside (Note: this allows teleporting into flowers as well as midair). If false or not specified, the default behavior applies (do no check; just teleport the target(s)).",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "w",
					"description": "Displays a private message to other players.",
					"arguments": [
						{
							"argumentName": "target",
							"description": "Specifies the player(s) to send the message to.",
							"type": "selector"
						},
						{
							"argumentName": "message",
							"description": "Specifies the message to tell.",
							"type": "string",
							"allowMultiple": true
						}
					]
				},
				{
					"commandName": "weather",
					"description": "Sets the weather.",
					"arguments": [
						{
							"argumentName": "weather",
							"type": "string",
							"additionalData": {
								"values": [
									"clear",
									"rain",
									"thunder"
								]
							}
						},
						{
							"argumentName": "duration",
							"description": "Specifies the time in seconds for the specified weather to last. If not specified, the duration defaults to 5 minutes. If 0, resets to random weather duration.",
							"type": "number",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "weather",
					"description": "Sets the weather.",
					"arguments": [
						{
							"argumentName": "weather",
							"type": "string",
							"additionalData": {
								"values": [
									"clear",
									"rain",
									"thunder"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"query"
								]
							}
						}
					]
				},
				{
					"commandName": "xp",
					"description": "Adds or removes player experience.",
					"arguments": [
						{
							"argumentName": "amount",
							"description": "Specifies the amount of experience points or levels to be added to the player. Negative values remove experience instead of adding them.",
							"type": "number"
						},
						{
							"argumentName": "player",
							"description": "Specifies the target of the command.",
							"type": "selector",
							"isOptional": true
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"v1.17.10"
				]
			},
			"commands": [
				{
					"commandName": "dialogue",
					"description": "Opens NPC dialogue for a player.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"change"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "npc"
						},
						{
							"type": "string",
							"argumentName": "sceneName",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/dialogue/dynamic/sceneTagEnum.json"
							}
						},
						{
							"type": "selector",
							"argumentName": "player",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "dialogue",
					"description": "Opens NPC dialogue for a player.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"open"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "npc"
						},
						{
							"type": "selector",
							"argumentName": "player"
						},
						{
							"type": "string",
							"argumentName": "sceneName",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/dialogue/dynamic/sceneTagEnum.json"
							},
							"isOptional": true
						}
					]
				}
			]
		},
		{
			"requires": {
				"experimentalGameplay": [
					"educationEdition"
				]
			},
			"commands": [
				{
					"commandName": "ability",
					"description": "Grant an ability to the target.",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "Target"
						},
						{
							"type": "string",
							"argumentName": "ability",
							"additionalData": {
								"values": [
									"mayfly"
								]
							},
							"description": "This allows players to fly around the world, or be limited to ground travel only."
						},
						{
							"type": "boolean",
							"argumentName": "value",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "ability",
					"description": "Grant an ability to the target.",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "Target"
						},
						{
							"type": "string",
							"argumentName": "ability",
							"additionalData": {
								"values": [
									"mute"
								]
							},
							"description": "If you want to prevent a target from talking, you can set this ability to true. The user(s) will see the message 'chat has been disabled'."
						},
						{
							"type": "boolean",
							"argumentName": "value",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "ability",
					"description": "Grant an ability to the target.",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "Target"
						},
						{
							"type": "string",
							"argumentName": "ability",
							"additionalData": {
								"values": [
									"worldbuilder"
								]
							},
							"description": "You can control who is allowed to build and change the world with this command."
						},
						{
							"type": "boolean",
							"argumentName": "value",
							"isOptional": true
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.18.0"
				]
			},
			"commands": [
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"spawn"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position",
							"description": "Specifies the position to spawn the loot table."
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"loot"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "lootTable",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/lootTable/dynamic/shortLootTablePathEnum.json"
							}
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"spawn"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position",
							"description": "Specifies the position to spawn the loot table."
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"loot"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "lootTable",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/lootTable/dynamic/shortLootTablePathEnum.json"
							}
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.18.10"
				]
			},
			"commands": [
				{
					"commandName": "damage",
					"description": "Apply damage to the specified entities.",
					"arguments": [
						{
							"argumentName": "target",
							"type": "selector",
							"description": "Specifies the target(s) to damage."
						},
						{
							"argumentName": "amount",
							"type": "number",
							"description": "Specifies the value of damage to deal to."
						},
						{
							"argumentName": "cause",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/vanilla/damageType.json"
							},
							"description": "Specifies the type of the damage. Affects death messages for example.",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "damage",
					"description": "Apply damage to the specified entities.",
					"arguments": [
						{
							"argumentName": "target",
							"type": "selector",
							"description": "Specifies the target(s) to damage."
						},
						{
							"argumentName": "amount",
							"type": "number",
							"description": "Specifies the value of damage to deal to."
						},
						{
							"argumentName": "cause",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/vanilla/damageType.json"
							},
							"description": "Specifies the type of the damage. Affects death messages for example."
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"argumentName": "damager",
							"type": "selector",
							"description": "Specifies the damager who dealt the damage."
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.18.20"
				]
			},
			"selectorArguments": [
				{
					"argumentName": "hasitem",
					"description": "Filter target selection based on the items that target entities have in their inventory or are wearing.",
					"type": "scoreData", // Support other json data arguments than just "scoreData"
					"additionalData": {
						"multipleInstancesAllowed": "never",
						"supportsNegation": false
					}
				}
			],
			"commands": [
				{
					"commandName": "volumearea",
					"description": "Add, remove or list volumes in the current dimension.",
					"arguments": [
						{
							"argumentName": "mode",
							"type": "string",
							"additionalData": {
								"values": [
									"add"
								]
							}
						},
						{
							"argumentName": "identifier",
							"description": "Identifier of the volume to be added.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/volume/dynamic/identifierEnum.json"
							}
						},
						{
							"argumentName": "from",
							"type": "$coordinates",
							"description": "Where the volume should start in the world."
						},
						{
							"argumentName": "to",
							"type": "$coordinates",
							"description": "Where the volume should end in the world."
						},
						{
							"argumentName": "name",
							"type": "string",
							"isOptional": true,
							"description": "The optional name of the volume to be used when removing it."
						}
					]
				},
				{
					"commandName": "volumearea",
					"description": "Add, remove or list volumes in the current dimension.",
					"arguments": [
						{
							"argumentName": "mode",
							"type": "string",
							"additionalData": {
								"values": [
									"list"
								]
							}
						},
						{
							"argumentName": "volumeDimension",
							"type": "string",
							"additionalData": {
								"values": [
									"all-dimensions"
								]
							}
						}
					]
				},
				{
					"commandName": "volumearea",
					"description": "Add, remove or list volumes in the current dimension.",
					"arguments": [
						{
							"argumentName": "mode",
							"type": "string",
							"additionalData": {
								"values": [
									"remove"
								]
							}
						},
						{
							"argumentName": "name",
							"type": "string",
							"isOptional": true,
							"description": "The name of the volume to remove."
						}
					]
				},
				{
					"commandName": "volumearea",
					"description": "Add, remove or list volumes in the current dimension.",
					"arguments": [
						{
							"argumentName": "mode",
							"type": "string",
							"additionalData": {
								"values": [
									"remove"
								]
							}
						},
						{
							"argumentName": "position",
							"type": "$coordinates",
							"isOptional": true,
							"description": "The position of the volume to be removed."
						}
					]
				},
				{
					"commandName": "volumearea",
					"description": "Add, remove or list volumes in the current dimension.",
					"arguments": [
						{
							"argumentName": "mode",
							"type": "string",
							"additionalData": {
								"values": [
									"remove_all"
								]
							}
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the specified inventory or into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"spawn"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position",
							"description": "Specifies the position to spawn the loot table."
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"kill"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"spawn"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position",
							"description": "Specifies the position to spawn the loot table."
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"kill"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the specified inventory or into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"give"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "player"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"kill"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"give"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "player"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"kill"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"give"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "player"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"loot"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "lootTable",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/lootTable/dynamic/shortLootTablePathEnum.json"
							}
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"give"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "player"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"loot"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "lootTable",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/lootTable/dynamic/shortLootTablePathEnum.json"
							}
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tickingarea",
					"description": "Add, remove, or list ticking areas.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"add"
								]
							}
						},
						{
							"argumentName": "from",
							"description": "Specifies the coordinates of opposite corners of a rectangular area used to define a loaded area.",
							"type": "$coordinates"
						},
						{
							"argumentName": "to",
							"description": "Specifies the coordinates of opposite corners of a rectangular area used to define a loaded area.",
							"type": "$coordinates"
						},
						{
							"argumentName": "name",
							"description": "Specifies an optional name for a ticking area.",
							"type": "string",
							"isOptional": true
						},
						{
							"argumentName": "preload",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tickingarea",
					"description": "Add, remove, or list ticking areas.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"add"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"circle"
								]
							}
						},
						{
							"argumentName": "center",
							"description": "Specifies the coordinates of the center point of a circular area used to define a ticking area.",
							"type": "$coordinates"
						},
						{
							"argumentName": "radius",
							"description": "Specifies the radius of a circular ticking area as the number of chunks from the center to the edge of the circle.",
							"type": "number"
						},
						{
							"argumentName": "name",
							"description": "Specifies an optional name for a ticking area.",
							"type": "string",
							"isOptional": true
						},
						{
							"argumentName": "preload",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tickingarea",
					"description": "Add, remove, or list ticking areas.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"preload"
								]
							}
						},
						{
							"argumentName": "name",
							"description": "The name of the ticking area to preload.",
							"type": "string"
						},
						{
							"argumentName": "preload",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "tickingarea",
					"description": "Add, remove, or list ticking areas.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"preload"
								]
							}
						},
						{
							"argumentName": "position",
							"description": "The position of the ticking area to preload.",
							"type": "$coordinates"
						},
						{
							"argumentName": "preload",
							"type": "boolean",
							"isOptional": true
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.18.30"
				]
			},
			"commands": [
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the specified inventory or into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"insert"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position",
							"description": "Specifies the position to spawn the loot table."
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"kill"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"insert"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position",
							"description": "Specifies the position to spawn the loot table."
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"kill"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"insert"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position",
							"description": "Specifies the position to spawn the loot table."
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"loot"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "lootTable",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/lootTable/dynamic/shortLootTablePathEnum.json"
							}
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"insert"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position",
							"description": "Specifies the position to spawn the loot table."
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"loot"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "lootTable",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/lootTable/dynamic/shortLootTablePathEnum.json"
							}
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.19.0"
				]
			},
			"commands": [
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the specified inventory or into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slotType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/slotType.json"
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"argumentName": "count",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"kill"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slotType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/slotType.json"
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"argumentName": "count",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"kill"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the specified inventory or into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slotType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/slotType.json"
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"kill"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slotType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/slotType.json"
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"kill"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slotType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/slotType.json"
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"argumentName": "count",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"loot"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "lootTable",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/lootTable/dynamic/shortLootTablePathEnum.json"
							}
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slotType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/slotType.json"
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"argumentName": "count",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"loot"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "lootTable",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/lootTable/dynamic/shortLootTablePathEnum.json"
							}
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slotType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/slotType.json"
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"loot"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "lootTable",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/lootTable/dynamic/shortLootTablePathEnum.json"
							}
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slotType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/slotType.json"
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"loot"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "lootTable",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/lootTable/dynamic/shortLootTablePathEnum.json"
							}
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					"<",
					"1.19.10"
				]
			},
			"commands": [
				{
					"commandName": "locate",
					"description": "Locates closest structure.",
					"arguments": [
						{
							"argumentName": "feature",
							"description": "Specifies the structure to locate.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/structure.json"
							}
						}
					]
				}
			]
		},
		{
			"requires": {
				"matchAll": false,
				"experimentalGameplay": [
					"!upcomingCreatorFeatures"
				],
				"targetVersion": [
					"<",
					"1.19.10"
				]
			},
			"commands": [
				{
					"commandName": "execute",
					"description": "Executes another command.",
					"arguments": [
						{
							"argumentName": "origin",
							"description": "Specifies the target to be the command's executor. Must be a player name or target selector. If more than one entity is selected, the command is run once as each of them.",
							"type": "selector"
						},
						{
							"argumentName": "position",
							"description": "Specifies the position from which to run the command. coordinates specified with tilde and caret notation are relative to the target, not to the position of the command's execution.",
							"type": "$coordinates"
						},
						{
							"argumentName": "command",
							"type": "command",
							"description": "Specifies the command to be run. Must be a valid command."
						}
					]
				},
				{
					"commandName": "execute",
					"description": "Executes another command.",
					"arguments": [
						{
							"argumentName": "origin",
							"description": "Specifies the target to be the command's executor. Must be a player name or target selector. If more than one entity is selected, the command is run once as each of them.",
							"type": "selector"
						},
						{
							"argumentName": "position",
							"description": "Specifies the position from which to run the command. coordinates specified with tilde and caret notation are relative to the target, not to the position of the command's execution.",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"detect"
								]
							}
						},
						{
							"argumentName": "detectPos",
							"description": "Specifies the position of the block to check.",
							"type": "$coordinates"
						},
						{
							"argumentName": "block",
							"description": "Specifies the block ID that the block at detectPos, must match for the command to run.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
							}
						},
						{
							"argumentName": "data",
							"description": "Must be a valid block data for that type of block or -1 to match any block data.",
							"type": "number"
						},
						{
							"argumentName": "command",
							"type": "command",
							"description": "Specifies the command to be run. Must be a valid command."
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					"<=",
					"1.21.90"
				]
			},
			"commands": [
				{
					"commandName": "locate",
					"description": "Displays the coordinates for the closest structure of a given type.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"biome"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "biome",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/biome_identifiers"
							}
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.21.100"
				]
			},
			"commands": [
				{
					"commandName": "locate",
					"description": "Displays the coordinates for the closest structure of a given type.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"biome"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "biome",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/prefixed_biome_identifiers"
							}
						}
					]
				}
			]
		},
		{
			"commands": [
				{
					"commandName": "locate",
					"description": "Displays the coordinates of the closest structure of a given type.",
					"arguments": [
						{
							"type": "string",
							"argumentName": "feature",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/structure.json"
							}
						},
						{
							"argumentName": "useNewChunksOnly",
							"isOptional": true,
							"type": "boolean"
						}
					]
				},
				{
					"commandName": "locate",
					"description": "Displays the coordinates for the closest structure of a given type.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"structure"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "structure",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/structure.json"
							}
						},
						{
							"argumentName": "useNewChunksOnly",
							"isOptional": true,
							"type": "boolean"
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": {
					"min": "1.19.10",
					"max": "1.19.40"
				},
				"experimentalGameplay": [
					"upcomingCreatorFeatures"
				]
			},
			"commands": [
				{
					"commandName": "execute",
					"description": "Executes another command.",
					"arguments": [
						{
							"type": "subcommand",
							"allowMultiple": true
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"run"
								]
							}
						},
						{
							"argumentName": "command",
							"type": "command"
						}
					]
				}
			],
			"subcommands": [
				{
					"commandName": "execute",
					"commands": [
						// as
						{
							"commandName": "as",
							"description": "Sets the executor of the command.",
							"arguments": [
								{
									"argumentName": "origin",
									"type": "selector"
								}
							]
						},
						// at
						{
							"commandName": "at",
							"description": "Sets the execution position, rotation and dimension to match an entity, without changing the executor.",
							"arguments": [
								{
									"argumentName": "origin",
									"type": "selector"
								}
							]
						},
						// positioned > position
						{
							"commandName": "positioned",
							"description": "Sets the execution position without changing the rotation or dimension.",
							"arguments": [
								{
									"argumentName": "position",
									"type": "$coordinates"
								}
							]
						},
						// positioned > as
						{
							"commandName": "positioned",
							"description": "Sets the execution position without changing the rotation or dimension.",
							"arguments": [
								{
									"type": "string",
									"additionalData": {
										"values": [
											"as"
										]
									}
								},
								{
									"type": "selector",
									"argumentName": "origin"
								}
							]
						},
						// if > block > block state
						{
							"commandName": "if",
							"description": "Specify a condition which must be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Compares the block at a given position to a given block ID and state.",
									"additionalData": {
										"values": [
											"block"
										]
									}
								},
								{
									"argumentName": "position",
									"type": "$coordinates"
								},
								{
									"argumentName": "block",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
									}
								},
								{
									"argumentName": "blockStates",
									"type": "blockState"
								}
							]
						},
						// if > block > block data
						{
							"commandName": "if",
							"description": "Specify a condition which must be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Compares the block at a given position to a given block ID and data value.",
									"additionalData": {
										"values": [
											"block"
										]
									}
								},
								{
									"argumentName": "position",
									"type": "$coordinates"
								},
								{
									"argumentName": "block",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
									}
								},
								{
									"argumentName": "data",
									"type": "number"
								}
							]
						},
						// if > blocks
						{
							"commandName": "if",
							"description": "Specify a condition which must be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Compares the blocks in two equally sized volumes.",
									"additionalData": {
										"values": [
											"blocks"
										]
									}
								},
								{
									"argumentName": "begin",
									"type": "$coordinates"
								},
								{
									"argumentName": "end",
									"type": "$coordinates"
								},
								{
									"argumentName": "destination",
									"type": "$coordinates"
								},
								{
									"argumentName": "scanMode",
									"type": "string",
									"additionalData": {
										"values": [
											"all",
											"masked"
										]
									}
								}
							]
						},
						// if > entity
						{
							"commandName": "if",
							"description": "Specify a condition which must be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Checks whether one or more entities exist.",
									"additionalData": {
										"values": [
											"entity"
										]
									}
								},
								{
									"argumentName": "target",
									"type": "selector"
								}
							]
						},
						// if > score > comparison
						{
							"commandName": "if",
							"description": "Specify a condition which must be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Check whether a score has a specific relation to another score.",
									"additionalData": {
										"values": [
											"score"
										]
									}
								},
								{
									"argumentName": "target",
									"type": "selector"
								},
								{
									"argumentName": "objective",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
									}
								},
								{
									"argumentName": "operation",
									"type": "string",
									"additionalData": {
										"values": [
											"<",
											"<=",
											"=",
											">",
											">="
										]
									}
								},
								{
									"argumentName": "source",
									"type": "selector"
								},
								{
									"argumentName": "objective",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
									}
								}
							]
						},
						// if > score > matches
						{
							"commandName": "if",
							"description": "Specify a condition which must be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Check whether a score is in a given range.",
									"additionalData": {
										"values": [
											"score"
										]
									}
								},
								{
									"argumentName": "target",
									"type": "selector"
								},
								{
									"argumentName": "objective",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
									}
								},
								{
									"type": "string",
									"additionalData": {
										"values": [
											"matches"
										]
									}
								},
								{
									"argumentName": "range",
									"type": "integerRange"
								}
							]
						},
						// unless > block > block state
						{
							"commandName": "unless",
							"description": "Specify a condition which must not be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Compares the block at a given position to a given block ID and state.",
									"additionalData": {
										"values": [
											"block"
										]
									}
								},
								{
									"argumentName": "position",
									"type": "$coordinates"
								},
								{
									"argumentName": "block",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
									}
								},
								{
									"argumentName": "blockStates",
									"type": "blockState"
								}
							]
						},
						// unless > block > block data
						{
							"commandName": "unless",
							"description": "Specify a condition which must not be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Compares the block at a given position to a given block ID and data value.",
									"additionalData": {
										"values": [
											"block"
										]
									}
								},
								{
									"argumentName": "position",
									"type": "$coordinates"
								},
								{
									"argumentName": "block",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
									}
								},
								{
									"argumentName": "data",
									"type": "number"
								}
							]
						},
						// unless > blocks
						{
							"commandName": "unless",
							"description": "Specify a condition which must not be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Compares the blocks in two equally sized volumes.",
									"additionalData": {
										"values": [
											"blocks"
										]
									}
								},
								{
									"argumentName": "begin",
									"type": "$coordinates"
								},
								{
									"argumentName": "end",
									"type": "$coordinates"
								},
								{
									"argumentName": "destination",
									"type": "$coordinates"
								},
								{
									"argumentName": "scanMode",
									"type": "string",
									"additionalData": {
										"values": [
											"all",
											"masked"
										]
									}
								}
							]
						},
						// unless > entity
						{
							"commandName": "unless",
							"description": "Specify a condition which must not be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Checks whether one or more entities exist.",
									"additionalData": {
										"values": [
											"entity"
										]
									}
								},
								{
									"argumentName": "target",
									"type": "selector"
								}
							]
						},
						// if > score > comparison
						{
							"commandName": "unless",
							"description": "Specify a condition which must not be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Check whether a score has a specific relation to another score.",
									"additionalData": {
										"values": [
											"score"
										]
									}
								},
								{
									"argumentName": "target",
									"type": "selector"
								},
								{
									"argumentName": "objective",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
									}
								},
								{
									"argumentName": "operation",
									"type": "string",
									"additionalData": {
										"values": [
											"<",
											"<=",
											"=",
											">",
											">="
										]
									}
								},
								{
									"argumentName": "source",
									"type": "selector"
								},
								{
									"argumentName": "objective",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
									}
								}
							]
						},
						// unless > score > matches
						{
							"commandName": "unless",
							"description": "Specify a condition which must not be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Check whether a score is in a given range.",
									"additionalData": {
										"values": [
											"score"
										]
									}
								},
								{
									"argumentName": "target",
									"type": "selector"
								},
								{
									"argumentName": "objective",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
									}
								},
								{
									"type": "string",
									"additionalData": {
										"values": [
											"matches"
										]
									}
								},
								{
									"argumentName": "range",
									"type": "integerRange"
								}
							]
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					"=",
					"1.19.40"
				],
				"experimentalGameplay": [
					"upcomingCreatorFeatures"
				]
			},
			"subcommands": [
				{
					"commandName": "execute",
					"commands": [
						// rotated (relative)
						{
							"commandName": "rotated",
							"arguments": [
								{
									"argumentName": "yaw",
									"type": "string",
									"additionalData": {
										"values": [
											"~"
										]
									}
								},
								{
									"argumentName": "pitch",
									"type": "string",
									"additionalData": {
										"values": [
											"~"
										]
									}
								}
							]
						},
						// rotated (absolute)
						{
							"commandName": "rotated",
							"arguments": [
								{
									"argumentName": "yaw",
									"type": "number"
								},
								{
									"argumentName": "pitch",
									"type": "number"
								}
							]
						},
						// rotated > as
						{
							"commandName": "rotated",
							"arguments": [
								{
									"type": "string",
									"additionalData": {
										"values": [
											"as"
										]
									}
								},
								{
									"type": "selector",
									"argumentName": "origin"
								}
							]
						},
						// align
						{
							"commandName": "align",
							"arguments": [
								{
									"argumentName": "axes",
									"type": "string",
									"additionalData": {
										"values": [
											"x",
											"y",
											"z",
											"xy",
											"yx",
											"xz",
											"zx",
											"zy",
											"yz",
											"xyz",
											"xzy",
											"yzx",
											"yxz",
											"zxy",
											"zyx"
										]
									}
								}
							]
						},
						// facing
						{
							"commandName": "facing",
							"arguments": [
								{
									"argumentName": "position",
									"type": "$coordinates"
								}
							]
						},
						// facing > entity
						{
							"commandName": "facing",
							"arguments": [
								{
									"type": "string",
									"additionalData": {
										"values": [
											"entity"
										]
									}
								},
								{
									"type": "selector",
									"argumentName": "origin"
								},
								{
									"argumentName": "position",
									"type": "string",
									"additionalData": {
										"values": [
											"eyes",
											"feet"
										]
									}
								}
							]
						},
						{
							// in
							"commandName": "in",
							"arguments": [
								{
									"argumentName": "dimension",
									"type": "string",
									"additionalData": {
										"values": [
											"nether",
											"overworld",
											"the_end"
										]
									}
								}
							]
						},
						{
							// anchored
							"commandName": "anchored",
							"arguments": [
								{
									"type": "string",
									"additionalData": {
										"values": [
											"feet",
											"eyes"
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.19.40"
				]
			},
			"commands": [
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the specified inventory or into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"block"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"slot.container"
								]
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"argumentName": "count",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"kill"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"block"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"slot.container"
								]
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"argumentName": "count",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"kill"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the specified inventory or into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"block"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"slot.container"
								]
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"kill"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"block"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"slot.container"
								]
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"kill"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"block"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"slot.container"
								]
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"argumentName": "count",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"loot"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "lootTable",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/lootTable/dynamic/shortLootTablePathEnum.json"
							}
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"block"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"slot.container"
								]
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"argumentName": "count",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"loot"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "lootTable",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/lootTable/dynamic/shortLootTablePathEnum.json"
							}
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"block"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"slot.container"
								]
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"loot"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "lootTable",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/lootTable/dynamic/shortLootTablePathEnum.json"
							}
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"block"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"slot.container"
								]
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"loot"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "lootTable",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/lootTable/dynamic/shortLootTablePathEnum.json"
							}
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "summon",
					"description": "Summons an entity.",
					"arguments": [
						{
							"argumentName": "entityType",
							"description": "Specifies the entity to be summoned.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/entity_identifiers"
							}
						},
						{
							"argumentName": "spawnPos",
							"description": "Specifies the position to summon the entity. If not specified, defaults to the position of the command's execution.",
							"type": "$coordinates",
							"isOptional": true
						},
						{
							"argumentName": "yRot",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "xRot",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "spawnEvent",
							"description": "Specifies the in-game event for the entity.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/entity/dynamic/eventReferenceEnum.json"
							},
							"isOptional": true
						},
						{
							"argumentName": "nameTag",
							"description": "Specifies the name of the entity.",
							"type": "string",
							"isOptional": true
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					"<",
					"1.19.40"
				]
			},
			"commands": [
				{
					"commandName": "summon",
					"description": "Summons an entity.",
					"arguments": [
						{
							"argumentName": "entityType",
							"description": "Specifies the entity to be summoned.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/entity_identifiers"
							}
						},
						{
							"argumentName": "spawnPos",
							"description": "Specifies the position to summon the entity. If not specified, defaults to the position of the command's execution.",
							"type": "$coordinates",
							"isOptional": true
						},
						{
							"argumentName": "spawnEvent",
							"description": "Specifies the in-game event for the entity.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/entity/dynamic/eventReferenceEnum.json"
							},
							"isOptional": true
						},
						{
							"argumentName": "nameTag",
							"description": "Specifies the name of the entity.",
							"type": "string",
							"isOptional": true
						}
					]
				}
			]
		},
		{
			// New execute out of experimental
			"requires": {
				"targetVersion": [
					">=",
					"1.19.50"
				]
			},
			"commands": [
				{
					"commandName": "execute",
					"description": "Executes another command.",
					"arguments": [
						{
							"type": "subcommand",
							"allowMultiple": true
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"run"
								]
							}
						},
						{
							"argumentName": "command",
							"type": "command"
						}
					]
				}
			],
			"subcommands": [
				{
					"commandName": "execute",
					"commands": [
						// as
						{
							"commandName": "as",
							"description": "Sets the executor of the command.",
							"arguments": [
								{
									"argumentName": "origin",
									"type": "selector"
								}
							]
						},
						// at
						{
							"commandName": "at",
							"description": "Sets the execution position, rotation and dimension to match an entity, without changing the executor.",
							"arguments": [
								{
									"argumentName": "origin",
									"type": "selector"
								}
							]
						},
						// positioned > position
						{
							"commandName": "positioned",
							"description": "Sets the execution position without changing the rotation or dimension.",
							"arguments": [
								{
									"argumentName": "position",
									"type": "$coordinates"
								}
							]
						},
						// positioned > as
						{
							"commandName": "positioned",
							"description": "Sets the execution position without changing the rotation or dimension.",
							"arguments": [
								{
									"type": "string",
									"additionalData": {
										"values": [
											"as"
										]
									}
								},
								{
									"type": "selector",
									"argumentName": "origin"
								}
							]
						},
						// if > block
						{
							"commandName": "if",
							"description": "Specify a condition which must be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Compares the block at a given position to a given block ID and state.",
									"additionalData": {
										"values": [
											"block"
										]
									}
								},
								{
									"argumentName": "position",
									"type": "$coordinates"
								},
								{
									"argumentName": "block",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
									}
								}
							]
						},
						// if > block > block state
						{
							"commandName": "if",
							"description": "Specify a condition which must be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Compares the block at a given position to a given block ID and state.",
									"additionalData": {
										"values": [
											"block"
										]
									}
								},
								{
									"argumentName": "position",
									"type": "$coordinates"
								},
								{
									"argumentName": "block",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
									}
								},
								{
									"argumentName": "blockStates",
									"type": "blockState"
								}
							]
						},
						// if > block > block data
						{
							"commandName": "if",
							"description": "Specify a condition which must be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Compares the block at a given position to a given block ID and data value.",
									"additionalData": {
										"values": [
											"block"
										]
									}
								},
								{
									"argumentName": "position",
									"type": "$coordinates"
								},
								{
									"argumentName": "block",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
									}
								},
								{
									"argumentName": "data",
									"type": "number"
								}
							]
						},
						// if > blocks
						{
							"commandName": "if",
							"description": "Specify a condition which must be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Compares the blocks in two equally sized volumes.",
									"additionalData": {
										"values": [
											"blocks"
										]
									}
								},
								{
									"argumentName": "begin",
									"type": "$coordinates"
								},
								{
									"argumentName": "end",
									"type": "$coordinates"
								},
								{
									"argumentName": "destination",
									"type": "$coordinates"
								},
								{
									"argumentName": "scanMode",
									"type": "string",
									"additionalData": {
										"values": [
											"all",
											"masked"
										]
									}
								}
							]
						},
						// if > entity
						{
							"commandName": "if",
							"description": "Specify a condition which must be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Checks whether one or more entities exist.",
									"additionalData": {
										"values": [
											"entity"
										]
									}
								},
								{
									"argumentName": "target",
									"type": "selector"
								}
							]
						},
						// if > score > comparison
						{
							"commandName": "if",
							"description": "Specify a condition which must be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Check whether a score has a specific relation to another score.",
									"additionalData": {
										"values": [
											"score"
										]
									}
								},
								{
									"argumentName": "target",
									"type": "selector"
								},
								{
									"argumentName": "objective",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
									}
								},
								{
									"argumentName": "operation",
									"type": "string",
									"additionalData": {
										"values": [
											"<",
											"<=",
											"=",
											">",
											">="
										]
									}
								},
								{
									"argumentName": "source",
									"type": "selector"
								},
								{
									"argumentName": "objective",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
									}
								}
							]
						},
						// if > score > matches
						{
							"commandName": "if",
							"description": "Specify a condition which must be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Check whether a score is in a given range.",
									"additionalData": {
										"values": [
											"score"
										]
									}
								},
								{
									"argumentName": "target",
									"type": "selector"
								},
								{
									"argumentName": "objective",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
									}
								},
								{
									"type": "string",
									"additionalData": {
										"values": [
											"matches"
										]
									}
								},
								{
									"argumentName": "range",
									"type": "integerRange"
								}
							]
						},
						// unless > block > block state
						{
							"commandName": "unless",
							"description": "Specify a condition which must not be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Compares the block at a given position to a given block ID and state.",
									"additionalData": {
										"values": [
											"block"
										]
									}
								},
								{
									"argumentName": "position",
									"type": "$coordinates"
								},
								{
									"argumentName": "block",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
									}
								},
								{
									"argumentName": "blockStates",
									"type": "blockState"
								}
							]
						},
						// unless > block > block data
						{
							"commandName": "unless",
							"description": "Specify a condition which must not be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Compares the block at a given position to a given block ID and data value.",
									"additionalData": {
										"values": [
											"block"
										]
									}
								},
								{
									"argumentName": "position",
									"type": "$coordinates"
								},
								{
									"argumentName": "block",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/block_identifiers"
									}
								},
								{
									"argumentName": "data",
									"type": "number"
								}
							]
						},
						// unless > blocks
						{
							"commandName": "unless",
							"description": "Specify a condition which must not be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Compares the blocks in two equally sized volumes.",
									"additionalData": {
										"values": [
											"blocks"
										]
									}
								},
								{
									"argumentName": "begin",
									"type": "$coordinates"
								},
								{
									"argumentName": "end",
									"type": "$coordinates"
								},
								{
									"argumentName": "destination",
									"type": "$coordinates"
								},
								{
									"argumentName": "scanMode",
									"type": "string",
									"additionalData": {
										"values": [
											"all",
											"masked"
										]
									}
								}
							]
						},
						// unless > entity
						{
							"commandName": "unless",
							"description": "Specify a condition which must not be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Checks whether one or more entities exist.",
									"additionalData": {
										"values": [
											"entity"
										]
									}
								},
								{
									"argumentName": "target",
									"type": "selector"
								}
							]
						},
						// if > score > comparison
						{
							"commandName": "unless",
							"description": "Specify a condition which must not be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Check whether a score has a specific relation to another score.",
									"additionalData": {
										"values": [
											"score"
										]
									}
								},
								{
									"argumentName": "target",
									"type": "selector"
								},
								{
									"argumentName": "objective",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
									}
								},
								{
									"argumentName": "operation",
									"type": "string",
									"additionalData": {
										"values": [
											"<",
											"<=",
											"=",
											">",
											">="
										]
									}
								},
								{
									"argumentName": "source",
									"type": "selector"
								},
								{
									"argumentName": "objective",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
									}
								}
							]
						},
						// unless > score > matches
						{
							"commandName": "unless",
							"description": "Specify a condition which must not be met to execute the next subcommand.",
							"arguments": [
								{
									"type": "string",
									"description": "Check whether a score is in a given range.",
									"additionalData": {
										"values": [
											"score"
										]
									}
								},
								{
									"argumentName": "target",
									"type": "selector"
								},
								{
									"argumentName": "objective",
									"type": "string",
									"additionalData": {
										"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/scoreboardObjective.json"
									}
								},
								{
									"type": "string",
									"additionalData": {
										"values": [
											"matches"
										]
									}
								},
								{
									"argumentName": "range",
									"type": "integerRange"
								}
							]
						},
						{
							"commandName": "rotated",
							"arguments": [
								{
									"argumentName": "yaw",
									"type": "string",
									"additionalData": {
										"values": [
											"~"
										]
									}
								},
								{
									"argumentName": "pitch",
									"type": "string",
									"additionalData": {
										"values": [
											"~"
										]
									}
								}
							]
						},
						// rotated (absolute)
						{
							"commandName": "rotated",
							"arguments": [
								{
									"argumentName": "yaw",
									"type": "number"
								},
								{
									"argumentName": "pitch",
									"type": "number"
								}
							]
						},
						// rotated > as
						{
							"commandName": "rotated",
							"arguments": [
								{
									"type": "string",
									"additionalData": {
										"values": [
											"as"
										]
									}
								},
								{
									"type": "selector",
									"argumentName": "origin"
								}
							]
						},
						// align
						{
							"commandName": "align",
							"arguments": [
								{
									"argumentName": "axes",
									"type": "string",
									"additionalData": {
										"values": [
											"x",
											"y",
											"z",
											"xy",
											"yx",
											"xz",
											"zx",
											"zy",
											"yz",
											"xyz",
											"xzy",
											"yzx",
											"yxz",
											"zxy",
											"zyx"
										]
									}
								}
							]
						},
						// facing
						{
							"commandName": "facing",
							"arguments": [
								{
									"argumentName": "position",
									"type": "$coordinates"
								}
							]
						},
						// facing > entity
						{
							"commandName": "facing",
							"arguments": [
								{
									"type": "string",
									"additionalData": {
										"values": [
											"entity"
										]
									}
								},
								{
									"type": "selector",
									"argumentName": "origin"
								},
								{
									"argumentName": "position",
									"type": "string",
									"additionalData": {
										"values": [
											"eyes",
											"feet"
										]
									}
								}
							]
						},
						{
							// in
							"commandName": "in",
							"arguments": [
								{
									"argumentName": "dimension",
									"type": "string",
									"additionalData": {
										"values": [
											"nether",
											"overworld",
											"the_end"
										]
									}
								}
							]
						},
						{
							// anchored
							"commandName": "anchored",
							"arguments": [
								{
									"type": "string",
									"additionalData": {
										"values": [
											"feet",
											"eyes"
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"commands": [
				{
					"commandName": "scriptevent",
					"description": "Triggers a script event with an ID and message.",
					"arguments": [
						{
							"argumentName": "messageId",
							"type": "string",
							"description": "A namespaced id of the event to trigger."
						},
						{
							"argumentName": "message",
							"type": "string",
							"description": "The message for the script to recieve. Maximum 256 characters."
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.19.80"
				]
			},
			"selectorArguments": [
				{
					"argumentName": "haspermission",
					"description": "Filter target selection based on the input permissions of the target entities.",
					"type": "scoreData", // TODO: support other object types that just score data
					"additionalData": {
						"multipleInstancesAllowed": "never",
						"supportsNegation": false
					}
				}
			],
			"commands": [
				{
					"commandName": "inputpermission",
					"description": "Specify the operation for the player's permission status.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "target",
							"type": "selector"
						},
						{
							"argumentName": "permission",
							"type": "string",
							"additionalData": {
								"values": [
									"camera",
									"dismount",
									"jump",
									"lateral_movement",
									"mount",
									"move_backward",
									"move_forward",
									"move_left",
									"move_right",
									"movement",
									"sneak"
								]
							}
						},
						{
							"argumentName": "state",
							"type": "string",
							"additionalData": {
								"values": [
									"enabled",
									"disabled"
								]
							}
						}
					]
				},
				{
					"commandName": "inputpermission",
					"description": "Specify the operation for the player's permission status.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"query"
								]
							}
						},
						{
							"argumentName": "target",
							"type": "selector"
						},
						{
							"argumentName": "permission",
							"type": "string",
							"additionalData": {
								"values": [
									"camera",
									"dismount",
									"jump",
									"lateral_movement",
									"mount",
									"move_backward",
									"move_forward",
									"move_left",
									"move_right",
									"movement",
									"sneak"
								]
							}
						},
						{
							"argumentName": "state",
							"type": "string",
							"isOptional": true,
							"additionalData": {
								"values": [
									"enabled",
									"disabled"
								]
							}
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.20.60"
				]
			},
			"commands": [
				{
					"commandName": "hud",
					"description": "Hide the visibility of a HUD element.",
					"arguments": [
						{
							"argumentName": "target",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"hide"
								]
							}
						},
						{
							"argumentName": "hud_element",
							"type": "string",
							"additionalData": {
								"values": [
									"air_bubbles",
									"all",
									"armor",
									"crosshair",
									"health",
									"horse_health",
									"hotbar",
									"hunger",
									"item_text",
									"paperdoll",
									"progress_bar",
									"status_effects",
									"tooltips",
									"touch_controls"
								]
							}
						}
					]
				},
				{
					"commandName": "hud",
					"description": "Reset the visibility of a HUD element.",
					"arguments": [
						{
							"argumentName": "target",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"reset"
								]
							}
						},
						{
							"argumentName": "hud_element",
							"type": "string",
							"additionalData": {
								"values": [
									"air_bubbles",
									"all",
									"armor",
									"crosshair",
									"health",
									"horse_health",
									"hotbar",
									"hunger",
									"paperdoll",
									"progress_bar",
									"tooltips",
									"touch_controls"
								]
							}
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.20.70"
				]
			},
			"selectorArguments": [
				{
					"argumentName": "has_property",
					"description": "Filter target selection based on the property map of the target entities.",
					"type": "scoreData", // TODO: support more than just score data!!
					"additionalData": {
						"multipleInstancesAllowed": "never",
						"supportsNegation": false
					}
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.21.40"
				]
			},
			"commands": [
				{
					"commandName": "schedule",
					"description": "Removes a schedule.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"clear"
								]
							}
						},
						{
							"argumentName": "function",
							"description": "Specifies the function to be cleared.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/function/dynamic/commandPathEnum.json"
							}
						}
					]
				},
				{
					"commandName": "schedule",
					"description": "Removes a schedule.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"on_area_loaded"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"clear"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"function"
								]
							}
						},
						{
							"argumentName": "function",
							"description": "Specifies the function to be cleared.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/function/dynamic/commandPathEnum.json"
							}
						}
					]
				},
				{
					"commandName": "schedule",
					"description": "Removes a schedule.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"on_area_loaded"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"clear"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"tickingarea"
								]
							}
						},
						{
							"argumentName": "name",
							"description": "Specifies the name of a ticking area.",
							"type": "string"
						},
						{
							"argumentName": "function",
							"description": "Specifies the function to be cleared.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/function/dynamic/commandPathEnum.json"
							}
						}
					]
				},
				{
					"commandName": "effect",
					"description": "Add or remove status effects.",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "player",
							"description": "Specifies the target(s)."
						},
						{
							"argumentName": "effect",
							"description": "Specifies the effect to be added or removed.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/effectName.json"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"infinite"
								]
							}
						},
						{
							"argumentName": "amplifier",
							"description": "Specifies the number of additional levels to add to the effect. If not specified, defaults to 0. Note that the first tier of a status effect (e.g. Regeneration I) is 0, so the second tier, for example Regeneration II, would be specified by an amplifier level of 1.",
							"type": "number",
							"isOptional": true
						},
						{
							"argumentName": "hideParticles",
							"description": "Specifies whether the particles and the HUD indicator‌ of the status effect should be hidden. If not specified, defaults to false.",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "effect",
					"description": "Add or remove status effects.",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "player",
							"description": "Specifies the target(s)."
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"clear"
								]
							}
						},
						{
							"argumentName": "effect",
							"description": "Specifies the effect to be added or removed.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/effectName.json"
							}
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.21.50"
				]
			},
			"commands": [
				{
					"commandName": "schedule",
					"description": "Delays the execution of a function.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"delay"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"add"
								]
							}
						},
						{
							"argumentName": "function",
							"description": "Specify the function to be delayed.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/function/dynamic/commandPathEnum.json"
							}
						},
						{
							"argumentName": "delay",
							"description": "Specifies the delay in ticks",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"append",
									"replace"
								]
							}
						}
					]
				},
				{
					"commandName": "schedule",
					"description": "Delays the execution of a function.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"delay"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"clear"
								]
							}
						},
						{
							"argumentName": "function",
							"description": "Specify the function to be cleared.",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/function/dynamic/commandPathEnum.json"
							}
						}
					]
				}
			]
		},
		{
			"commands": [
				{
					"commandName": "aimassist",
					"description": "Clears the aim assist.",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"clear"
								]
							}
						}
					]
				},
				{
					"commandName": "aimassist",
					"description": "Sets the aim assist.",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "xAngle",
							"type": "number"
						},
						{
							"argumentName": "yAngle",
							"type": "number"
						},
						{
							"argumentName": "maxDistance",
							"type": "number"
						},
						{
							"argumentName": "targetMode",
							"type": "string",
							"additionalData": {
								"values": [
									"angle",
									"distance"
								]
							}
						},
						{
							"argumentName": "presetId",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/aim_assist_preset_identifiers"
							}
						}
					]
				}
			]
		},
		// place command
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.21.90"
				]
			},
			"commands": [
				{
					"commandName": "place",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"jigsaw"
								]
							}
						},
						{
							"argumentName": "pool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/template_pool_identifiers"
							}
						},
						{
							"argumentName": "maxDepth",
							"type": "number"
						},
						{
							"argumentName": "pos",
							"type": "$coordinates",
							"isOptional": true
						},
						{
							"argumentName": "keepJigsaws",
							"type": "boolean",
							"isOptional": true
						},
						{
							"argumentName": "includeEntities",
							"type": "boolean",
							"isOptional": true
						},
						{
							"argumentName": "liquidSettings",
							"type": "string",
							"additionalData": {
								"values": [
									"apply_waterlogging",
									"ignore_waterlogging"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "place",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"structure"
								]
							}
						},
						{
							"argumentName": "structure",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/jigsaw_structure_identifiers"
							}
						},
						{
							"argumentName": "pos",
							"type": "$coordinates",
							"isOptional": true
						},
						{
							"argumentName": "ignoreStartHeight",
							"type": "boolean",
							"isOptional": true
						},
						{
							"argumentName": "keepJigsaws",
							"type": "boolean",
							"isOptional": true
						},
						{
							"argumentName": "includeEntities",
							"type": "boolean",
							"isOptional": true
						},
						{
							"argumentName": "liquidSettings",
							"type": "string",
							"additionalData": {
								"values": [
									"apply_waterlogging",
									"ignore_waterlogging"
								]
							},
							"isOptional": true
						}
					]
				}
			]
		},
		{
			"commands": [
				{
					"commandName": "place",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"feature"
								]
							}
						},
						{
							"argumentName": "feature",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/feature_identifiers"
							}
						},
						{
							"argumentName": "position",
							"type": "$coordinates",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "place",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"featurerule"
								]
							}
						},
						{
							"argumentName": "featurerule",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/feature_rule_identifiers"
							}
						},
						{
							"argumentName": "position",
							"type": "$coordinates",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "place",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"jigsaw"
								]
							}
						},
						{
							"argumentName": "pool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/template_pool_identifiers"
							}
						},
						{
							"argumentName": "maxDepth",
							"type": "number"
						},
						{
							"argumentName": "pos",
							"type": "$coordinates",
							"isOptional": true
						},
						{
							"argumentName": "keepJigsaws",
							"type": "boolean",
							"isOptional": true
						},
						{
							"argumentName": "includeEntities",
							"type": "boolean",
							"isOptional": true
						}
					]
				},
				{
					"commandName": "place",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"structure"
								]
							}
						},
						{
							"argumentName": "structure",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/jigsaw_structure_identifiers"
							}
						},
						{
							"argumentName": "pos",
							"type": "$coordinates",
							"isOptional": true
						},
						{
							"argumentName": "ignoreStartHeight",
							"type": "boolean",
							"isOptional": true
						},
						{
							"argumentName": "keepJigsaws",
							"type": "boolean",
							"isOptional": true
						},
						{
							"argumentName": "includeEntities",
							"type": "boolean",
							"isOptional": true
						}
					]
				}
			]
		},
		//#region Camera
		{
			"commands": [
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"clear"
								]
							}
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"fade"
								]
							}
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"fade"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"color"
								]
							}
						},
						{
							"argumentName": "red",
							"type": "number"
						},
						{
							"argumentName": "green",
							"type": "number"
						},
						{
							"argumentName": "blue",
							"type": "number"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"fade"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"time"
								]
							}
						},
						{
							"argumentName": "fadeInSeconds",
							"type": "number"
						},
						{
							"argumentName": "holdSeconds",
							"type": "number"
						},
						{
							"argumentName": "fadeOutSeconds",
							"type": "number"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"fade"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"time"
								]
							}
						},
						{
							"argumentName": "fadeInSeconds",
							"type": "number"
						},
						{
							"argumentName": "holdSeconds",
							"type": "number"
						},
						{
							"argumentName": "fadeOutSeconds",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"color"
								]
							}
						},
						{
							"argumentName": "red",
							"type": "number"
						},
						{
							"argumentName": "green",
							"type": "number"
						},
						{
							"argumentName": "blue",
							"type": "number"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"default"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"ease"
								]
							}
						},
						{
							"argumentName": "easeTime",
							"type": "number"
						},
						{
							"argumentName": "easeType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/easeType.json"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"default"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"ease"
								]
							}
						},
						{
							"argumentName": "easeTime",
							"type": "number"
						},
						{
							"argumentName": "easeType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/easeType.json"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtEntity",
							"type": "selector"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"ease"
								]
							}
						},
						{
							"argumentName": "easeTime",
							"type": "number"
						},
						{
							"argumentName": "easeType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/easeType.json"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtPosition",
							"type": "$coordinates"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"ease"
								]
							}
						},
						{
							"argumentName": "easeTime",
							"type": "number"
						},
						{
							"argumentName": "easeType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/easeType.json"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"pos"
								]
							}
						},
						{
							"argumentName": "position",
							"type": "$coordinates"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"ease"
								]
							}
						},
						{
							"argumentName": "easeTime",
							"type": "number"
						},
						{
							"argumentName": "easeType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/easeType.json"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"pos"
								]
							}
						},
						{
							"argumentName": "position",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtEntity",
							"type": "selector"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"ease"
								]
							}
						},
						{
							"argumentName": "easeTime",
							"type": "number"
						},
						{
							"argumentName": "easeType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/easeType.json"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"pos"
								]
							}
						},
						{
							"argumentName": "position",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtPosition",
							"type": "$coordinates"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"ease"
								]
							}
						},
						{
							"argumentName": "easeTime",
							"type": "number"
						},
						{
							"argumentName": "easeType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/easeType.json"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"pos"
								]
							}
						},
						{
							"argumentName": "position",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"rot"
								]
							}
						},
						{
							"argumentName": "xRot",
							"type": "number"
						},
						{
							"argumentName": "yRot",
							"type": "number"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"ease"
								]
							}
						},
						{
							"argumentName": "easeTime",
							"type": "number"
						},
						{
							"argumentName": "easeType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/easeType.json"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"rot"
								]
							}
						},
						{
							"argumentName": "xRot",
							"type": "number"
						},
						{
							"argumentName": "yRot",
							"type": "number"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity_offset"
								]
							}
						},
						{
							"argumentName": "xEntityOffset",
							"type": "number"
						},
						{
							"argumentName": "yEntityOffset",
							"type": "number"
						},
						{
							"argumentName": "zEntityOffset",
							"type": "number"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity_offset"
								]
							}
						},
						{
							"argumentName": "xEntityOffset",
							"type": "number"
						},
						{
							"argumentName": "yEntityOffset",
							"type": "number"
						},
						{
							"argumentName": "zEntityOffset",
							"type": "number"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtEntity",
							"type": "selector"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtPosition",
							"type": "$coordinates"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"pos"
								]
							}
						},
						{
							"argumentName": "position",
							"type": "$coordinates"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"pos"
								]
							}
						},
						{
							"argumentName": "position",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtEntity",
							"type": "selector"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"pos"
								]
							}
						},
						{
							"argumentName": "position",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"facing"
								]
							}
						},
						{
							"argumentName": "lookAtPosition",
							"type": "$coordinates"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"pos"
								]
							}
						},
						{
							"argumentName": "position",
							"type": "$coordinates"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"rot"
								]
							}
						},
						{
							"argumentName": "xRot",
							"type": "number"
						},
						{
							"argumentName": "yRot",
							"type": "number"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"rot"
								]
							}
						},
						{
							"argumentName": "xRot",
							"type": "number"
						},
						{
							"argumentName": "yRot",
							"type": "number"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"rot"
								]
							}
						},
						{
							"argumentName": "xRot",
							"type": "number"
						},
						{
							"argumentName": "yRot",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity_offset"
								]
							}
						},
						{
							"argumentName": "xEntityOffset",
							"type": "number"
						},
						{
							"argumentName": "yEntityOffset",
							"type": "number"
						},
						{
							"argumentName": "zEntityOffset",
							"type": "number"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"rot"
								]
							}
						},
						{
							"argumentName": "xRot",
							"type": "number"
						},
						{
							"argumentName": "yRot",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"view_offset"
								]
							}
						},
						{
							"argumentName": "xViewOffset",
							"type": "number"
						},
						{
							"argumentName": "yViewOffset",
							"type": "number"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"rot"
								]
							}
						},
						{
							"argumentName": "xRot",
							"type": "number"
						},
						{
							"argumentName": "yRot",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"view_offset"
								]
							}
						},
						{
							"argumentName": "xViewOffset",
							"type": "number"
						},
						{
							"argumentName": "yViewOffset",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity_offset"
								]
							}
						},
						{
							"argumentName": "xEntityOffset",
							"type": "number"
						},
						{
							"argumentName": "yEntityOffset",
							"type": "number"
						},
						{
							"argumentName": "zEntityOffset",
							"type": "number"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"view_offset"
								]
							}
						},
						{
							"argumentName": "xViewOffset",
							"type": "number"
						},
						{
							"argumentName": "yViewOffset",
							"type": "number"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"argumentName": "preset",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/camera_preset_identifiers"
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"view_offset"
								]
							}
						},
						{
							"argumentName": "xViewOffset",
							"type": "number"
						},
						{
							"argumentName": "yViewOffset",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity_offset"
								]
							}
						},
						{
							"argumentName": "xEntityOffset",
							"type": "number"
						},
						{
							"argumentName": "yEntityOffset",
							"type": "number"
						},
						{
							"argumentName": "zEntityOffset",
							"type": "number"
						}
					]
				}
			]
		},
		//#endregion
		{
			"commands": [
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"remove_target"
								]
							}
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"target_entity"
								]
							}
						},
						{
							"argumentName": "entity",
							"type": "selector"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"argumentName": "players",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"target_entity"
								]
							}
						},
						{
							"argumentName": "entity",
							"type": "selector"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"target_center_offset"
								]
							}
						},
						{
							"argumentName": "xTargetCenterOffset",
							"type": "number"
						},
						{
							"argumentName": "yTargetCenterOffset",
							"type": "number"
						},
						{
							"argumentName": "zTargetCenterOffset",
							"type": "number"
						}
					]
				}
			]
		},
		{
			"commands": [
				{
					"commandName": "loot",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"give"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "players"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mine"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "targetBlockPosition"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"give"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "players"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mine"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "targetBlockPosition"
						},
						{
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"insert"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mine"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "targetBlockPosition"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							}
						}
					]
				},
				{
					"commandName": "loot",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"insert"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mine"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "targetBlockPosition"
						},
						{
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							}
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the specified inventory or into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slotType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/slotType.json"
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"argumentName": "count",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mine"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "targetBlockPosition"
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slotType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/slotType.json"
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"argumentName": "count",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mine"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "targetBlockPosition"
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the specified inventory or into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slotType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/slotType.json"
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mine"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "targetBlockPosition"
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"entity"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "entity"
						},
						{
							"argumentName": "slotType",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/slotType.json"
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mine"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "targetBlockPosition"
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the specified inventory or into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"block"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"slot.container"
								]
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mine"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "targetBlockPosition"
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"block"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"slot.container"
								]
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mine"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "targetBlockPosition"
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"block"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"slot.container"
								]
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"argumentName": "count",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mine"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "targetBlockPosition"
						},
						{
							"argumentName": "tool",
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"description": "Drops the given loot table into the world.",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"replace"
								]
							}
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"block"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"slot.container"
								]
							}
						},
						{
							"argumentName": "slotId",
							"type": "number"
						},
						{
							"argumentName": "count",
							"type": "number"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mine"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "targetBlockPosition"
						},
						{
							"argumentName": "slot",
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							},
							"isOptional": true
						}
					]
				},
				{
					"commandName": "loot",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"spawn"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mine"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "targetBlockPosition"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mainhand",
									"offhand"
								]
							}
						}
					]
				},
				{
					"commandName": "loot",
					"arguments": [
						{
							"type": "string",
							"additionalData": {
								"values": [
									"spawn"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "position"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"mine"
								]
							}
						},
						{
							"type": "$coordinates",
							"argumentName": "targetBlockPosition"
						},
						{
							"type": "string",
							"additionalData": {
								"schemaReference": "/data/packages/minecraftBedrock/schema/general/reference/identifiers.json#/definitions/item_identifiers"
							}
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					"<",
					"1.21.90"
				],
				"experimentalGameplay": [
					"experimentalCreatorCameraFeatures"
				]
			},
			"commands": [
				{
					"commandName": "controlscheme",
					"description": "Sets or clears control scheme",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "players"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"clear"
								]
							}
						}
					]
				},
				{
					"commandName": "controlscheme",
					"description": "Sets or clears control scheme",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "players"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "controlscheme",
							"additionalData": {
								"values": [
									"camera_relative",
									"camera_relative_strafe",
									"locked_player_relative_strafe",
									"player_relative",
									"player_relative_strafe"
								]
							}
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.21.90"
				]
			},
			"commands": [
				{
					"commandName": "controlscheme",
					"description": "Sets or clears control scheme",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "players"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "controlscheme",
							"additionalData": {
								"values": [
									"camera_relative",
									"locked_player_relative_strafe",
									"player_relative",
									"player_relative_strafe"
								]
							}
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.21.90"
				],
				"experimentalGameplay": [
					"experimentalCreatorCameraFeatures"
				]
			},
			"commands": [
				{
					"commandName": "controlscheme",
					"description": "Sets or clears control scheme",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "players"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"set"
								]
							}
						},
						{
							"type": "string",
							"argumentName": "controlscheme",
							"additionalData": {
								"values": [
									"camera_relative",
									"camera_relative_strafe",
									"locked_player_relative_strafe",
									"player_relative",
									"player_relative_strafe"
								]
							}
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.21.100"
				]
			},
			"commands": [
				{
					"commandName": "camera",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "players"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"fov_clear"
								]
							}
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "players"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"fov_set"
								]
							}
						},
						{
							"type": "number",
							"argumentName": "fov_value"
						}
					]
				}
			]
		},
		{
			"requires": {
				"targetVersion": [
					">=",
					"1.21.120"
				],
				"experimentalGameplay": [
					"upcomingCreatorFeatures"
				]
			},
			"commands": [
				{
					"commandName": "camera",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "players"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"attach_to_entity"
								]
							}
						},
						{
							"type": "selector",
							"argumentName": "target"
						}
					]
				},
				{
					"commandName": "camera",
					"arguments": [
						{
							"type": "selector",
							"argumentName": "players"
						},
						{
							"type": "string",
							"additionalData": {
								"values": [
									"detach_from_entity"
								]
							}
						}
					]
				}
			]
		}
	]
}