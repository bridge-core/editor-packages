{
	"$schema": "http://json-schema.org/draft-07/schema",
	"additionalProperties": false,
	"description": "Adds a timer after which this entity will spawn another entity or item (similar to vanilla's chicken's egg-laying behavior).",
	"type": "object",
	"title": "Spawn Entity",
	"properties": {
		"entities": {
			"title": "Entities",
			"anyOf": [
				{
					"type": "array",
					"items": {
						"type": "object",
						"additionalProperties": false,
						"properties": {
							"should_leash": {
								"title": "Should Leash",
								"description": "If true, this the spawned entity will be leashed to the parent.",
								"type": "boolean",
								"default": false
							},
							"num_to_spawn": {
								"title": "Number To Spawn",
								"description": "The number of entities of this type to spawn each time that this triggers.",
								"type": "integer",
								"default": 1
							},
							"min_wait_time": {
								"title": "Minimum Wait Time",
								"description": "Minimum amount of time to randomly wait in seconds before another entity is spawned.",
								"type": "integer",
								"default": 300
							},
							"max_wait_time": {
								"title": "Maximum Wait Time",
								"description": "Maximum amount of time to randomly wait in seconds before another entity is spawned.",
								"type": "integer",
								"default": 600
							},
							"spawn_entity": {
								"title": "Spawn Entity",
								"description": "Identifier of the entity to spawn, leave empty to spawn the item defined above instead.",
								"$ref": "../../../general/reference/identifiers.json#/definitions/entity_identifiers"
							},
							"spawn_event": {
								"title": "Event: On Spawn",
								"description": "Event to call when the entity is spawned.",
								"type": "string",
								"$ref": "../../dynamic/currentContext/eventEnum.json"
							},
							"spawn_item": {
								"title": "Spawn Item",
								"description": "Item identifier of the item to spawn.",
								"$ref": "../../../general/reference/identifiers.json#/definitions/item_identifiers",
								"default": "egg"
							},
							"spawn_method": {
								"title": "Spawn Method",
								"description": "Method to use to spawn the entity.",
								"type": "string",
								"const": "born"
							},
							"spawn_sound": {
								"title": "Spawn Sound Event",
								"description": "Identifier of the sound effect to play when the entity is spawned.",
								"type": "string",
								"$ref": "../../../general/reference/soundEvent.json",
								"default": "plop"
							},
							"filters": {
								"title": "Filters",
								"description": "If present, the specified entity will only spawn if the filter evaluates to true.",
								"$ref": "../../general/v1.16.0/filter.json"
							},
							"single_use": {
								"title": "Single Use",
								"description": "If true, this component will only ever spawn the specified entity once.",
								"type": "boolean",
								"default": false
							}
						}
					}
				},
				{
					"type": "object",
					"properties": {
						"should_leash": {
							"title": "Should Leash",
							"description": "If true, this the spawned entity will be leashed to the parent.",
							"type": "boolean",
							"default": false
						},
						"num_to_spawn": {
							"title": "Number To Spawn",
							"description": "The number of entities of this type to spawn each time that this triggers.",
							"type": "integer",
							"default": 1
						},
						"min_wait_time": {
							"title": "Minimum Wait Time",
							"description": "Minimum amount of time to randomly wait in seconds before another entity is spawned.",
							"type": "integer",
							"default": 300
						},
						"max_wait_time": {
							"title": "Maximum Wait Time",
							"description": "Maximum amount of time to randomly wait in seconds before another entity is spawned.",
							"type": "integer",
							"default": 600
						},
						"spawn_entity": {
							"title": "Spawn Entity",
							"description": "Identifier of the entity to spawn, leave empty to spawn the item defined above instead.",
							"$ref": "../../../general/reference/identifiers.json#/definitions/entity_identifiers"
						},
						"spawn_event": {
							"title": "Event: On Spawn",
							"description": "Event to call when the entity is spawned.",
							"type": "string",
							"$ref": "../../dynamic/currentContext/eventEnum.json"
						},
						"spawn_item": {
							"title": "Spawn Item",
							"description": "Item identifier of the item to spawn.",
							"$ref": "../../../general/reference/identifiers.json#/definitions/item_identifiers",
							"default": "egg"
						},
						"spawn_method": {
							"title": "Spawn Method",
							"description": "Method to use to spawn the entity.",
							"type": "string",
							"const": "born"
						},
						"spawn_sound": {
							"title": "Spawn Sound Event",
							"description": "Identifier of the sound effect to play when the entity is spawned.",
							"type": "string",
							"$ref": "../../../general/reference/soundEvent.json",
							"default": "plop"
						},
						"filters": {
							"title": "Filters",
							"description": "If present, the specified entity will only spawn if the filter evaluates to true.",
							"$ref": "../../general/v1.16.0/filter.json"
						},
						"single_use": {
							"title": "Single Use",
							"description": "If true, this component will only ever spawn the specified entity once.",
							"type": "boolean",
							"default": false
						}
					}
				}
			]
		}
	}
}
