{
	"$schema": "http://json-schema.org/draft-07/schema",
	"type": "array",
	"items": {
		"type": "object",
		"anyOf": [
			{
				"properties": {
					"condition": {
						"$ref": "./general.json#/definitions/conditions"
					}
				},
				"required": [
					"condition"
				]
			},
			{
				"if": {
					"properties": {
						"condition": {
							"const": "has_mark_variant"
						}
					},
					"required": [
						"condition"
					]
				},
				"then": {
					"properties": {
						"value": {
							"type": "integer"
						}
					}
				}
			},
			{
				"if": {
					"properties": {
						"condition": {
							"const": "entity_properties"
						}
					},
					"required": [
						"condition"
					]
				},
				"then": {
					"properties": {
						"entity": {
							"type": "string",
							"enum": [
								"this"
							]
						},
						"properties": {
							"properties": {
								"on_fire": {
									"type": "boolean"
								}
							}
						}
					}
				}
			},
			{
				"if": {
					"properties": {
						"condition": {
							"const": "match_tool"
						}
					},
					"required": [
						"condition"
					]
				},
				"then": {
					"properties": {
						"item": {
							"description": "The item identifier to match for.",
							"$ref": "../general/reference/identifiers.json#/definitions/item_identifiers"
						},
						"count": {
							"type": "object",
							"description": "How many items of the specified identifier the player must have selected",
							"properties": {
								"range_min": {
									"type": "integer",
									"description": "Minimum count for this condition to pass"
								},
								"range_max": {
									"type": "integer",
									"description": "Maximum count for this condition to pass"
								}
							}
						},
						"durability": {
							"type": "object",
							"properties": {
								"range_min": {
									"type": "integer",
									"description": "Minimum durability level for this condition to pass"
								},
								"range_max": {
									"type": "integer",
									"description": "Maximum durability level for this condition to pass"
								}
							}
						},
						"enchantments": {
							"type": "array",
							"description": "Specify enchantments that the tool must have",
							"items": {
								"type": "object",
								"properties": {
									"enchantment": {
										"description": "The enchantment to test for",
										"$ref": "../general/enchantName.json"
									},
									"range_min": {
										"type": "integer",
										"description": "Minimum enchantment level for this condition to pass"
									},
									"range_max": {
										"type": "integer",
										"description": "Maximum enchantment level for this condition to pass"
									}
								}
							}
						},
						"minecraft:match_tool_filter_all": {
							"type": "array",
							"description": "Matches if the item has all of these tags",
							"items": {
								"$ref": "../general/reference/tags.json#/definitions/item_tags"
							}
						},
						"minecraft:match_tool_filter_any": {
							"type": "array",
							"description": "Matches if the item has any of these tags",
							"items": {
								"$ref": "../general/reference/tags.json#/definitions/item_tags"
							}
						},
						"minecraft:match_tool_filter_none": {
							"type": "array",
							"description": "Matches if the item has none of these tags",
							"items": {
								"$ref": "../general/reference/tags.json#/definitions/item_tags"
							}
						}
					}
				}
			},
			{
				"if": {
					"properties": {
						"condition": {
							"const": "random_chance"
						}
					},
					"required": [
						"condition"
					]
				},
				"then": {
					"properties": {
						"chance": {
							"type": "number"
						}
					}
				}
			},
			{
				"if": {
					"properties": {
						"condition": {
							"const": "random_chance_with_looting"
						}
					},
					"required": [
						"condition"
					]
				},
				"then": {
					"properties": {
						"chance": {
							"type": "number"
						},
						"looting_multiplier": {
							"type": "number"
						}
					}
				}
			},
			{
				"if": {
					"properties": {
						"condition": {
							"const": "random_difficulty_chance"
						}
					},
					"required": [
						"condition"
					]
				},
				"then": {
					"properties": {
						"default_chance": {
							"type": "number"
						},
						"peaceful": {
							"type": "number"
						},
						"hard": {
							"type": "number"
						}
					}
				}
			},
			{
				"if": {
					"properties": {
						"condition": {
							"const": "random_regional_difficulty_chance"
						}
					},
					"required": [
						"condition"
					]
				},
				"then": {
					"properties": {
						"max_chance": {
							"type": "number"
						}
					}
				}
			},
			{
				"if": {
					"properties": {
						"condition": {
							"const": "killed_by_entity"
						}
					},
					"required": [
						"condition"
					]
				},
				"then": {
					"properties": {
						"entity_type": {
							"$ref": "../general/reference/identifiers.json#/definitions/entity_identifiers"
						}
					}
				}
			},
			{
				"if": {
					"properties": {
						"condition": {
							"const": "damaged_by_entity"
						}
					},
					"required": [
						"condition"
					]
				},
				"then": {
					"properties": {
						"entity_type": {
							"$ref": "../general/reference/identifiers.json#/definitions/entity_identifiers"
						}
					}
				}
			}
		]
	}
}